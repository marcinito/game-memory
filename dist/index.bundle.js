/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var n={402:(n,t,e)=>{"use strict";e.d(t,{Z:()=>a});var A=e(537),r=e.n(A),o=e(645),i=e.n(o)()(r());i.push([n.id,"* {\n  margin: 0;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  list-style-type: none;\n}\n\nbody {\n  background-color: red;\n}\n\n@media (min-width: 320px) {\n  .container {\n    width: 100vw;\n    height: 100vh;\n  }\n  .header {\n    width: 110%;\n    height: 20%;\n    border-bottom: 10px solid black;\n    border-bottom-left-radius: 50%;\n    -webkit-perspective: 500px;\n            perspective: 500px;\n    background: -webkit-gradient(linear, right top, left top, from(#ff6666), to(#1f8dba));\n    background: linear-gradient(to left, #ff6666, #1f8dba);\n    z-index: 100;\n  }\n  .box {\n    width: 100px;\n    height: 100px;\n    background-color: rgba(23, 122, 22, 0.5);\n    -webkit-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n    -webkit-transform: rotateY(450deg) rotateX(20deg);\n            transform: rotateY(450deg) rotateX(20deg);\n    position: relative;\n    left: 1%;\n    top: 3%;\n    z-index: 20;\n    animation: boxDance 5s infinite ease alternate-reverse;\n  }\n  .cubic {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .one {\n    background-color: red;\n    -webkit-transform: translateZ(100px);\n            transform: translateZ(100px);\n  }\n  .two {\n    background: -webkit-gradient(linear, right top, left top, from(red), color-stop(green), color-stop(yellow), to(white));\n    background: linear-gradient(to left, red, green, yellow, white);\n    -webkit-transform: rotateX(90deg) translateZ(50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(50px) translateY(50px);\n  }\n  .three {\n    background-color: rgba(190, 0, 239, 0.5);\n    -webkit-transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n  }\n  .four {\n    background: -webkit-gradient(linear, left top, right top, from(#b3e0f2), color-stop(#ff9999), to(#d65f5f));\n    background: linear-gradient(to right, #b3e0f2, #ff9999, #d65f5f);\n    opacity: 0.7;\n    -webkit-transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n            transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n  }\n  @-webkit-keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  @keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  .motoPage {\n    position: absolute;\n    -webkit-transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , transform 2s;\n    transition: background-color 3s , transform 2s , -webkit-transform 2s;\n    left: 70%;\n    top: 10%;\n    font-family: 'Gill Sans';\n    font-size: 2rem;\n    background: -webkit-gradient(linear, left top, right top, from(red), color-stop(blue), to(yellow));\n    background: linear-gradient(to right, red, blue, yellow);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    color: transparent;\n    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serifmonospace;\n    -webkit-animation: motoPageMove 4s 2s ease-in-out forwards;\n            animation: motoPageMove 4s 2s ease-in-out forwards;\n  }\n  @-webkit-keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  @keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  .content {\n    width: 0%;\n    opacity: 0;\n    height: 80%;\n    margin-top: 1%;\n    border-top: none;\n    border-bottom-right-radius: 30%;\n    border-top-right-radius: 10%;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    background-color: rgba(190, 160, 209, 0.5);\n    border-right: 5px solid black;\n    -webkit-box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n            box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n  }\n  .gameArea {\n    width: 80%;\n    height: 70%;\n    position: absolute;\n  }\n  .puzzel {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n    background-color: red;\n    position: relative;\n  }\n  .firstLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    position: relative;\n  }\n  .firstLevel .puzzel7 {\n    background-color: blue;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel4 {\n    background-color: yellow;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .firstLevel .puzzel3 {\n    background-color: orange;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel6 {\n    background-color: green;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .imgCover {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    opacity: 0.5;\n  }\n  .imagesToMatch {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .secondLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    position: relative;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n  }\n  .secondLevel .puzzel7 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 4;\n    -ms-grid-column-span: 1;\n    grid-column: 4/5;\n  }\n  .secondLevel .puzzel4 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel5 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 1;\n    -ms-grid-column-span: 1;\n    grid-column: 1/2;\n  }\n  .secondLevel .puzzel9 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel8 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .secondLevel .puzzel6 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .thirdLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n  }\n  .startGame {\n    position: absolute;\n    top: 50%;\n    -webkit-transform: translate(0, -50%);\n            transform: translate(0, -50%);\n    width: 14%;\n    height: 40%;\n    z-index: 200;\n    border-top-right-radius: 40%;\n    border-bottom-right-radius: 40%;\n    display: block;\n    border: none;\n    background: skyblue;\n    -webkit-transition: background-color 0.15s;\n    transition: background-color 0.15s;\n    font-size: 1.1rem;\n    font-weight: bold;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n  .startGame:hover {\n    background-color: #1f8dba;\n    font-size: 1.4rem;\n  }\n  .boxToCreateOwnLevel {\n    width: 100%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    border: 5px double brown;\n    background: -webkit-gradient(linear, right top, left top, from(#fff3f5), color-stop(#9a9a9a), to(#666666));\n    background: linear-gradient(to left, #fff3f5, #9a9a9a, #666666);\n    position: relative;\n    left: 0%;\n    top: 50%;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-size: 1.1rem;\n    -webkit-box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n            box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n    border-top-right-radius: 3%;\n  }\n  .wrapperInput {\n    margin-top: 5%;\n    font-size: 1.3rem;\n    text-align: center;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  }\n  .ownLevel {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n    width: 100%;\n    height: 100%;\n  }\n  .h1FromInstruction {\n    text-align: center;\n    margin-bottom: 2%;\n    font-size: 1.4rem;\n  }\n  #idImage {\n    background-color: rgba(221, 20, 190, 0.5);\n    width: 100%;\n    text-align: center;\n  }\n  #idImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .nazwaObrazka {\n    color: rgba(221, 20, 190, 0.5);\n    -webkit-text-stroke: 1px black;\n    font-weight: bold;\n  }\n  #addImage {\n    background-color: #ff6666;\n    color: black;\n    font-weight: bold;\n    text-align: center;\n    min-height: 30%;\n    width: 100%;\n  }\n  #addImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .adresDoimg {\n    color: #ff6666;\n  }\n  .infoJakSkopiowacObraz {\n    font-weight: bold;\n    font-size: 1.2rem;\n    -webkit-text-stroke: 0.5px blue;\n  }\n  .importantText {\n    font-weight: bold;\n    font-size: 1.2rem;\n    color: darkorange;\n  }\n  .wazne {\n    font-weight: bold;\n    -webkit-text-stroke: 1px black;\n  }\n  .btnAddImage {\n    width: 90%;\n    height: 4%;\n    left: 50%;\n    margin-top: 5%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    font-size: 1.1rem;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddImage:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnAddLevel {\n    margin-top: 5%;\n    font-size: 1.1rem;\n    width: 90%;\n    height: 4%;\n    left: 50%;\n    position: relative;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddLevel:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnStart {\n    margin-top: 5%;\n    font-size: 1rem;\n    width: 90%;\n    height: 4%;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    margin-bottom: 5%;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n  }\n  .btnStart:hover {\n    background-color: black;\n    color: white;\n  }\n  .exampleImagesToAdd {\n    border: 1px solid black;\n    width: 100%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    background-color: #ff99ff;\n  }\n  .exampleImages {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n  .statement {\n    width: 80%;\n    height: 80%;\n    position: absolute;\n    top: 70%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .h1Statement {\n    text-align: center;\n    -webkit-text-stroke: 1px #999900;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .prefaceStatement {\n    font-size: 1.3rem;\n    margin: 3%;\n    text-align: center;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .olPak {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    border: 1px solid black;\n  }\n  .firstOl {\n    text-align: center;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  }\n  .firstOl:nth-child(2) {\n    background-color: #ffcfd8;\n    padding: 2%;\n    width: 50%;\n  }\n  .firstOl:nth-child(1) {\n    background-color: #ffcfd8;\n    position: relative;\n    border-right: 2px solid black;\n    padding: 2%;\n  }\n  .li {\n    border-bottom: 1px dotted black;\n  }\n  .li:hover {\n    background-color: white;\n  }\n  .emStatement {\n    font-size: 1rem;\n    margin: 3%;\n    font-weight: bold;\n  }\n  .divUl {\n    border: 1px solid black;\n    text-align: center;\n    margin: 3%;\n    background: -webkit-gradient(linear, right top, left top, from(magenta), to(#666600));\n    background: linear-gradient(to left, magenta, #666600);\n    font-size: 1rem;\n    color: blue;\n    -webkit-text-stroke: 1px black;\n    font-size: 1.2rem;\n    width: 100%;\n  }\n  .h5 {\n    margin-bottom: 10%;\n    padding-bottom: 10%;\n    font-size: 1.3rem;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .li {\n    color: #660000;\n  }\n  .transitionContainer {\n    position: relative;\n  }\n  .textWhenPassLevel {\n    font-size: 3rem;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    text-align: center;\n    text-shadow: 3px 3px #ff3333;\n  }\n  .waitNextLvl {\n    text-align: center;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    -webkit-text-stroke: 1px solid darkorange;\n    position: absolute;\n    top: 20%;\n  }\n  .boxLoading {\n    width: 300px;\n    height: 200px;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    display: flex;\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0%);\n            transform: translate(-50%, 0%);\n  }\n  .oneLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: oneL 0.5s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .twoLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: twoL 0.5s 0.15s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .threeLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: threeL 0.5s 0.25s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .fourLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: fourL 0.5s 0.35s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  @-webkit-keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n}\n\n@media (min-width: 500px) {\n  .container {\n    width: 100vw;\n    height: 100vh;\n  }\n  .header {\n    max-width: 100%;\n    height: 20%;\n    border-bottom: 10px solid black;\n    border-bottom-left-radius: 50%;\n    -webkit-perspective: 500px;\n            perspective: 500px;\n    background: -webkit-gradient(linear, right top, left top, from(#ff6666), to(#1f8dba));\n    background: linear-gradient(to left, #ff6666, #1f8dba);\n    z-index: 100;\n  }\n  .box {\n    width: 100px;\n    height: 100px;\n    background-color: rgba(23, 122, 22, 0.5);\n    -webkit-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n    -webkit-transform: rotateY(450deg) rotateX(20deg);\n            transform: rotateY(450deg) rotateX(20deg);\n    position: relative;\n    left: 10%;\n    top: 20%;\n    z-index: 20;\n    animation: boxDance 5s infinite ease alternate-reverse;\n  }\n  .cubic {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .one {\n    background-color: red;\n    -webkit-transform: translateZ(100px);\n            transform: translateZ(100px);\n  }\n  .two {\n    background: -webkit-gradient(linear, right top, left top, from(red), color-stop(green), color-stop(yellow), to(white));\n    background: linear-gradient(to left, red, green, yellow, white);\n    -webkit-transform: rotateX(90deg) translateZ(50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(50px) translateY(50px);\n  }\n  .three {\n    background-color: rgba(190, 0, 239, 0.5);\n    -webkit-transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n  }\n  .four {\n    background: -webkit-gradient(linear, left top, right top, from(#b3e0f2), color-stop(#ff9999), to(#d65f5f));\n    background: linear-gradient(to right, #b3e0f2, #ff9999, #d65f5f);\n    opacity: 0.7;\n    -webkit-transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n            transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n  }\n  @-webkit-keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  @keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  .motoPage {\n    position: absolute;\n    -webkit-transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , transform 2s;\n    transition: background-color 3s , transform 2s , -webkit-transform 2s;\n    left: 60%;\n    top: 10%;\n    font-family: 'Gill Sans';\n    font-size: 3rem;\n    background: -webkit-gradient(linear, left top, right top, from(red), color-stop(blue), to(yellow));\n    background: linear-gradient(to right, red, blue, yellow);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    color: transparent;\n    width: 35%;\n    text-align: center;\n    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serifmonospace;\n    -webkit-animation: motoPageMove 4s 2s ease-in-out forwards;\n            animation: motoPageMove 4s 2s ease-in-out forwards;\n  }\n  @-webkit-keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  @keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  .content {\n    width: 0%;\n    opacity: 0;\n    height: 80%;\n    margin-top: 1%;\n    border-top: none;\n    border-bottom-right-radius: 30%;\n    border-top-right-radius: 10%;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    background-color: rgba(190, 160, 209, 0.5);\n    border-right: 5px solid black;\n    -webkit-box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n            box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n  }\n  .gameArea {\n    width: 80%;\n    height: 70%;\n    position: absolute;\n  }\n  .puzzel {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n    background-color: red;\n    position: relative;\n  }\n  .firstLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    position: relative;\n  }\n  .firstLevel .puzzel7 {\n    background-color: blue;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel4 {\n    background-color: yellow;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .firstLevel .puzzel3 {\n    background-color: orange;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel6 {\n    background-color: green;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .imgCover {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    opacity: 0.5;\n  }\n  .imagesToMatch {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .secondLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    position: relative;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n  }\n  .secondLevel .puzzel7 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 4;\n    -ms-grid-column-span: 1;\n    grid-column: 4/5;\n  }\n  .secondLevel .puzzel4 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel5 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 1;\n    -ms-grid-column-span: 1;\n    grid-column: 1/2;\n  }\n  .secondLevel .puzzel9 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel8 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .secondLevel .puzzel6 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .thirdLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n  }\n  .startGame {\n    position: absolute;\n    top: 50%;\n    -webkit-transform: translate(0, -50%);\n            transform: translate(0, -50%);\n    width: 8%;\n    height: 40%;\n    z-index: 200;\n    border-top-right-radius: 40%;\n    border-bottom-right-radius: 40%;\n    display: block;\n    border: none;\n    background: skyblue;\n    -webkit-transition: background-color 0.15s;\n    transition: background-color 0.15s;\n    font-size: 1.1rem;\n    font-weight: bold;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n  .startGame:hover {\n    background-color: #1f8dba;\n    font-size: 1.4rem;\n  }\n  .boxToCreateOwnLevel {\n    width: 100%;\n    height: calc(fit-content+20px);\n    border: 5px double brown;\n    background: -webkit-gradient(linear, right top, left top, from(#fff3f5), color-stop(#9a9a9a), to(#666666));\n    background: linear-gradient(to left, #fff3f5, #9a9a9a, #666666);\n    position: relative;\n    left: 0%;\n    top: 50%;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-size: 1.1rem;\n    -webkit-box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n            box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n    border-top-right-radius: 3%;\n  }\n  .wrapperInput {\n    margin-top: 5%;\n    font-size: 1.3rem;\n    text-align: center;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  }\n  .ownLevel {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n    width: 100%;\n    height: 100%;\n  }\n  .h1FromInstruction {\n    text-align: center;\n    margin-bottom: 2%;\n    font-size: 1.4rem;\n  }\n  #idImage {\n    background-color: rgba(221, 20, 190, 0.5);\n    width: 100%;\n    text-align: center;\n  }\n  #idImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .nazwaObrazka {\n    color: rgba(221, 20, 190, 0.5);\n    -webkit-text-stroke: 1px black;\n    font-weight: bold;\n  }\n  #addImage {\n    background-color: #ff6666;\n    color: black;\n    font-weight: bold;\n    text-align: center;\n    min-height: 30%;\n    width: 100%;\n  }\n  #addImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .adresDoimg {\n    color: #ff6666;\n  }\n  .infoJakSkopiowacObraz {\n    font-weight: bold;\n    font-size: 1.2rem;\n    -webkit-text-stroke: 0.5px blue;\n  }\n  .importantText {\n    font-weight: bold;\n    font-size: 1.2rem;\n    color: darkorange;\n  }\n  .wazne {\n    font-weight: bold;\n    -webkit-text-stroke: 1px black;\n  }\n  .btnAddImage {\n    width: 90%;\n    font-size: 2rem;\n    height: 10%;\n    left: 50%;\n    padding: 2%;\n    margin-top: 5%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddImage:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnAddLevel {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 90%;\n    height: 4%;\n    left: 50%;\n    position: relative;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddLevel:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnStart {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 90%;\n    height: 4%;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    margin-bottom: 5%;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n  }\n  .btnStart:hover {\n    background-color: black;\n    color: white;\n  }\n  .exampleImagesToAdd {\n    border: 1px solid black;\n    width: 90%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    background-color: #ff99ff;\n  }\n  .exampleImages {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n  .statement {\n    width: 80%;\n    height: 80%;\n    position: absolute;\n    top: 70%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .h1Statement {\n    text-align: center;\n    -webkit-text-stroke: 1px #999900;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .prefaceStatement {\n    font-size: 1.3rem;\n    margin: 3%;\n    text-align: center;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .olPak {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n  }\n  .firstOl {\n    font-size: 1.2rem;\n    text-align: center;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  }\n  .firstOl:nth-child(2) {\n    background-color: #ffcfd8;\n    padding: 2%;\n    width: 50%;\n  }\n  .firstOl:nth-child(1) {\n    background-color: #ffcfd8;\n    position: relative;\n    border-right: 2px solid black;\n    padding: 2%;\n    font-size: 1.3rem;\n    width: 50%;\n  }\n  .li {\n    border-bottom: 1px dotted black;\n  }\n  .li:hover {\n    background-color: white;\n  }\n  .emStatement {\n    font-size: 1rem;\n    margin: 3%;\n    font-weight: bold;\n  }\n  .divUl {\n    border: 1px solid black;\n    text-align: center;\n    margin: 3%;\n    background: -webkit-gradient(linear, right top, left top, from(magenta), to(#666600));\n    background: linear-gradient(to left, magenta, #666600);\n    font-size: 1rem;\n    color: blue;\n    -webkit-text-stroke: 1px black;\n    font-size: 1.2rem;\n    width: 100%;\n  }\n  .h5 {\n    margin-bottom: 10%;\n    padding-bottom: 10%;\n    font-size: 1.3rem;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .li {\n    color: #660000;\n  }\n  .transitionContainer {\n    position: relative;\n  }\n  .textWhenPassLevel {\n    font-size: 3rem;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    text-align: center;\n    text-shadow: 3px 3px #ff3333;\n  }\n  .waitNextLvl {\n    text-align: center;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    -webkit-text-stroke: 1px solid darkorange;\n    position: absolute;\n    top: 20%;\n  }\n  .boxLoading {\n    width: 300px;\n    height: 200px;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    display: flex;\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0%);\n            transform: translate(-50%, 0%);\n  }\n  .oneLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: oneL 0.5s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .twoLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: twoL 0.5s 0.15s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .threeLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: threeL 0.5s 0.25s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .fourLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: fourL 0.5s 0.35s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  @-webkit-keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @-webkit-keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n  @keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n      -webkit-box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n              box-shadow: 0px 3px rgba(0, 0, 0, 0.3);\n    }\n  }\n}\n\n@media (min-width: 719px) {\n  .container {\n    width: 100vw;\n    height: 100vh;\n  }\n  .header {\n    max-width: 100%;\n    height: 25%;\n    border-bottom: 10px solid black;\n    border-bottom-left-radius: 50%;\n    -webkit-perspective: 500px;\n            perspective: 500px;\n    background: -webkit-gradient(linear, right top, left top, from(#ff6666), to(#1f8dba));\n    background: linear-gradient(to left, #ff6666, #1f8dba);\n    z-index: 100;\n  }\n  .box {\n    width: 100px;\n    height: 100px;\n    background-color: rgba(23, 122, 22, 0.5);\n    -webkit-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n    -webkit-transform: rotateY(450deg) rotateX(20deg);\n            transform: rotateY(450deg) rotateX(20deg);\n    position: relative;\n    left: 1%;\n    top: 3%;\n    z-index: 20;\n    animation: boxDance 5s infinite ease alternate-reverse;\n  }\n  .cubic {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .one {\n    background-color: red;\n    -webkit-transform: translateZ(100px);\n            transform: translateZ(100px);\n  }\n  .two {\n    background: -webkit-gradient(linear, right top, left top, from(red), color-stop(green), color-stop(yellow), to(white));\n    background: linear-gradient(to left, red, green, yellow, white);\n    -webkit-transform: rotateX(90deg) translateZ(50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(50px) translateY(50px);\n  }\n  .three {\n    background-color: rgba(190, 0, 239, 0.5);\n    -webkit-transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n  }\n  .four {\n    background: -webkit-gradient(linear, left top, right top, from(#b3e0f2), color-stop(#ff9999), to(#d65f5f));\n    background: linear-gradient(to right, #b3e0f2, #ff9999, #d65f5f);\n    opacity: 0.7;\n    -webkit-transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n            transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n  }\n  @-webkit-keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  @keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  .motoPage {\n    position: absolute;\n    -webkit-transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , transform 2s;\n    transition: background-color 3s , transform 2s , -webkit-transform 2s;\n    left: 60%;\n    top: 10%;\n    font-family: 'Gill Sans';\n    font-size: 4rem;\n    background: -webkit-gradient(linear, left top, right top, from(red), color-stop(blue), to(yellow));\n    background: linear-gradient(to right, red, blue, yellow);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    color: transparent;\n    width: 35%;\n    text-align: center;\n    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serifmonospace;\n    -webkit-animation: motoPageMove 4s 2s ease-in-out forwards;\n            animation: motoPageMove 4s 2s ease-in-out forwards;\n  }\n  @-webkit-keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  @keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  .content {\n    width: 0%;\n    opacity: 0;\n    height: 85%;\n    margin-top: 1%;\n    border-top: none;\n    border-bottom-right-radius: 30%;\n    border-top-right-radius: 10%;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    background-color: rgba(190, 160, 209, 0.5);\n    border-right: 5px solid black;\n    -webkit-box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n            box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n  }\n  .gameArea {\n    width: 80%;\n    height: 70%;\n    position: absolute;\n  }\n  .puzzel {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n    background-color: red;\n    position: relative;\n  }\n  .firstLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    position: relative;\n  }\n  .firstLevel .puzzel7 {\n    background-color: blue;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel4 {\n    background-color: yellow;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .firstLevel .puzzel3 {\n    background-color: orange;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel6 {\n    background-color: green;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .imgCover {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    opacity: 0.5;\n  }\n  .imagesToMatch {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .secondLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    position: relative;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n  }\n  .secondLevel .puzzel7 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 4;\n    -ms-grid-column-span: 1;\n    grid-column: 4/5;\n  }\n  .secondLevel .puzzel4 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel5 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 1;\n    -ms-grid-column-span: 1;\n    grid-column: 1/2;\n  }\n  .secondLevel .puzzel9 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel8 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .secondLevel .puzzel6 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .thirdLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n  }\n  .startGame {\n    position: absolute;\n    top: 60%;\n    -webkit-transform: translate(0, -50%);\n            transform: translate(0, -50%);\n    width: 8%;\n    height: 40%;\n    z-index: 200;\n    border-top-right-radius: 40%;\n    border-bottom-right-radius: 40%;\n    display: block;\n    border: none;\n    background: skyblue;\n    -webkit-transition: background-color 0.15s;\n    transition: background-color 0.15s;\n    font-size: 1.1rem;\n    font-weight: bold;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n  .startGame:hover {\n    background-color: #1f8dba;\n    font-size: 1.4rem;\n  }\n  .boxToCreateOwnLevel {\n    width: 90%;\n    height: calc(fit-content+20px);\n    border: 5px double brown;\n    background: -webkit-gradient(linear, right top, left top, from(#fff3f5), color-stop(#9a9a9a), to(#666666));\n    background: linear-gradient(to left, #fff3f5, #9a9a9a, #666666);\n    position: relative;\n    left: 0%;\n    top: 50%;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-size: 1.1rem;\n    -webkit-box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n            box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n    border-top-right-radius: 3%;\n  }\n  .wrapperInput {\n    margin-top: 5%;\n    font-size: 1.3rem;\n    text-align: center;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  }\n  .ownLevel {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n    width: 100%;\n    height: 100%;\n  }\n  .h1FromInstruction {\n    text-align: center;\n    margin-bottom: 2%;\n    font-size: 1.4rem;\n  }\n  #idImage {\n    background-color: rgba(221, 20, 190, 0.5);\n    width: 80%;\n    text-align: center;\n    height: 50px;\n  }\n  #idImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .nazwaObrazka {\n    color: rgba(221, 20, 190, 0.5);\n    -webkit-text-stroke: 1px black;\n    font-weight: bold;\n  }\n  #addImage {\n    background-color: #ff6666;\n    color: black;\n    font-weight: bold;\n    text-align: center;\n    height: 100px;\n    width: 80%;\n  }\n  #addImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .adresDoimg {\n    color: #ff6666;\n  }\n  .infoJakSkopiowacObraz {\n    font-weight: bold;\n    font-size: 1.2rem;\n    -webkit-text-stroke: 0.5px blue;\n  }\n  .importantText {\n    font-weight: bold;\n    font-size: 1.2rem;\n    color: darkorange;\n  }\n  .wazne {\n    font-weight: bold;\n    -webkit-text-stroke: 1px black;\n  }\n  .btnAddImage {\n    width: 80%;\n    font-size: 2rem;\n    height: 10%;\n    left: 50%;\n    padding: 2%;\n    margin-top: 5%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddImage:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnAddLevel {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 80%;\n    height: 4%;\n    left: 50%;\n    position: relative;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddLevel:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnStart {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 80%;\n    height: 4%;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    margin-bottom: 5%;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n  }\n  .btnStart:hover {\n    background-color: black;\n    color: white;\n  }\n  .exampleImagesToAdd {\n    border: 1px solid black;\n    width: 60%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    background-color: #ff99ff;\n  }\n  .exampleImages {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n  .statement {\n    width: 80%;\n    height: 80%;\n    position: absolute;\n    top: 70%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .h1Statement {\n    text-align: center;\n    -webkit-text-stroke: 1px #999900;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .prefaceStatement {\n    font-size: 1.3rem;\n    margin: 3%;\n    text-align: center;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .olPak {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n  }\n  .firstOl {\n    font-size: 1.2rem;\n    text-align: center;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  }\n  .firstOl:nth-child(2) {\n    background-color: #ffcfd8;\n    padding: 2%;\n    width: 50%;\n  }\n  .firstOl:nth-child(1) {\n    background-color: #ffcfd8;\n    position: relative;\n    border-right: 2px solid black;\n    padding: 2%;\n    font-size: 1.3rem;\n    width: 50%;\n  }\n  .li {\n    border-bottom: 1px dotted black;\n  }\n  .li:hover {\n    background-color: white;\n  }\n  .emStatement {\n    font-size: 1rem;\n    margin: 3%;\n    font-weight: bold;\n  }\n  .divUl {\n    border: 1px solid black;\n    text-align: center;\n    margin: 3%;\n    background: -webkit-gradient(linear, right top, left top, from(magenta), to(#666600));\n    background: linear-gradient(to left, magenta, #666600);\n    font-size: 1rem;\n    color: blue;\n    -webkit-text-stroke: 1px black;\n    background-color: red;\n    font-size: 1.2rem;\n    width: 100%;\n  }\n  .h5 {\n    margin-bottom: 10%;\n    padding-bottom: 10%;\n    font-size: 1.3rem;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .li {\n    color: #660000;\n  }\n  .transitionContainer {\n    position: relative;\n  }\n  .textWhenPassLevel {\n    font-size: 3rem;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    text-align: center;\n    text-shadow: 3px 3px #ff3333;\n  }\n  .waitNextLvl {\n    text-align: center;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    -webkit-text-stroke: 1px solid darkorange;\n    position: absolute;\n    top: 20%;\n  }\n  .boxLoading {\n    width: 300px;\n    height: 200px;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    display: flex;\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0%);\n            transform: translate(-50%, 0%);\n  }\n  .oneLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: oneL 0.5s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .twoLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: twoL 0.5s 0.15s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .threeLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: threeL 0.5s 0.25s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .fourLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: fourL 0.5s 0.35s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  @-webkit-keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    width: 100vw;\n    height: 100vh;\n  }\n  .header {\n    max-width: 100%;\n    height: 25%;\n    border-bottom: 10px solid black;\n    border-bottom-left-radius: 50%;\n    -webkit-perspective: 500px;\n            perspective: 500px;\n    background: -webkit-gradient(linear, right top, left top, from(#ff6666), to(#1f8dba));\n    background: linear-gradient(to left, #ff6666, #1f8dba);\n    z-index: 100;\n  }\n  .box {\n    width: 100px;\n    height: 100px;\n    background-color: rgba(23, 122, 22, 0.5);\n    -webkit-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n    -webkit-transform: rotateY(450deg) rotateX(20deg);\n            transform: rotateY(450deg) rotateX(20deg);\n    position: relative;\n    left: 20%;\n    top: 20%;\n    z-index: 20;\n    animation: boxDance 5s infinite ease alternate-reverse;\n  }\n  .cubic {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .one {\n    background-color: red;\n    -webkit-transform: translateZ(100px);\n            transform: translateZ(100px);\n  }\n  .two {\n    background: -webkit-gradient(linear, right top, left top, from(red), color-stop(green), color-stop(yellow), to(white));\n    background: linear-gradient(to left, red, green, yellow, white);\n    -webkit-transform: rotateX(90deg) translateZ(50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(50px) translateY(50px);\n  }\n  .three {\n    background-color: rgba(190, 0, 239, 0.5);\n    -webkit-transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n            transform: rotateX(90deg) translateZ(-50px) translateY(50px);\n  }\n  .four {\n    background: -webkit-gradient(linear, left top, right top, from(#b3e0f2), color-stop(#ff9999), to(#d65f5f));\n    background: linear-gradient(to right, #b3e0f2, #ff9999, #d65f5f);\n    opacity: 0.7;\n    -webkit-transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n            transform: rotateY(90deg) translateZ(-50px) translateX(-50px);\n  }\n  @-webkit-keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  @keyframes boxDance {\n    from {\n      -webkit-transform: rotateX(-20deg) rotateY(220deg);\n              transform: rotateX(-20deg) rotateY(220deg);\n    }\n    to {\n      -webkit-transform: rotateX(100deg) rotateY(100deg);\n              transform: rotateX(100deg) rotateY(100deg);\n    }\n  }\n  .motoPage {\n    position: absolute;\n    -webkit-transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , -webkit-transform 2s;\n    transition: background-color 3s , transform 2s;\n    transition: background-color 3s , transform 2s , -webkit-transform 2s;\n    left: 60%;\n    top: 10%;\n    font-family: 'Gill Sans';\n    font-size: 4rem;\n    background: -webkit-gradient(linear, left top, right top, from(red), color-stop(blue), to(yellow));\n    background: linear-gradient(to right, red, blue, yellow);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    color: transparent;\n    width: 35%;\n    text-align: center;\n    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serifmonospace;\n    -webkit-animation: motoPageMove 4s 2s ease-in-out forwards;\n            animation: motoPageMove 4s 2s ease-in-out forwards;\n  }\n  @-webkit-keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  @keyframes motoPageMove {\n    from {\n    }\n    to {\n      -webkit-transform: rotateX(10deg) translateZ(20px);\n              transform: rotateX(10deg) translateZ(20px);\n      -webkit-box-shadow: 0.5px 0.5px 5px black;\n              box-shadow: 0.5px 0.5px 5px black;\n      -webkit-text-stroke: 1px white;\n      -webkit-transform: translateX(-50px) rotateX(350deg);\n              transform: translateX(-50px) rotateX(350deg);\n    }\n  }\n  .content {\n    width: 0%;\n    opacity: 0;\n    height: 95%;\n    margin-top: 1%;\n    border-top: none;\n    border-bottom-right-radius: 30%;\n    border-top-right-radius: 10%;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    background-color: rgba(190, 160, 209, 0.5);\n    border-right: 5px solid black;\n    -webkit-box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n            box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5);\n  }\n  .gameArea {\n    width: 80%;\n    height: 70%;\n    position: absolute;\n  }\n  .puzzel {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n    background-color: red;\n    position: relative;\n  }\n  .firstLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    position: relative;\n  }\n  .firstLevel .puzzel7 {\n    background-color: blue;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel4 {\n    background-color: yellow;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .firstLevel .puzzel3 {\n    background-color: orange;\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n  }\n  .firstLevel .puzzel6 {\n    background-color: green;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .imgCover {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    opacity: 0.5;\n  }\n  .imagesToMatch {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  .secondLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    position: relative;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n  }\n  .secondLevel .puzzel7 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 4;\n    -ms-grid-column-span: 1;\n    grid-column: 4/5;\n  }\n  .secondLevel .puzzel4 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel5 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 1;\n    -ms-grid-column-span: 1;\n    grid-column: 1/2;\n  }\n  .secondLevel .puzzel9 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 3;\n    -ms-grid-column-span: 1;\n    grid-column: 3/4;\n  }\n  .secondLevel .puzzel8 {\n    -ms-grid-row: 3;\n    -ms-grid-row-span: 1;\n    grid-row: 3/4;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .secondLevel .puzzel6 {\n    -ms-grid-row: 2;\n    -ms-grid-row-span: 1;\n    grid-row: 2/3;\n    -ms-grid-column: 2;\n    -ms-grid-column-span: 1;\n    grid-column: 2/3;\n  }\n  .thirdLevel {\n    width: 100%;\n    height: 100%;\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n  }\n  .startGame {\n    position: absolute;\n    top: 70%;\n    -webkit-transform: translate(0, -50%);\n            transform: translate(0, -50%);\n    width: 8%;\n    height: 40%;\n    z-index: 200;\n    border-top-right-radius: 40%;\n    border-bottom-right-radius: 40%;\n    display: block;\n    border: none;\n    background: skyblue;\n    -webkit-transition: background-color 0.15s;\n    transition: background-color 0.15s;\n    font-size: 1.1rem;\n    font-weight: bold;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n  .startGame:hover {\n    background-color: #1f8dba;\n    font-size: 1.4rem;\n  }\n  .boxToCreateOwnLevel {\n    width: 80%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    border: 5px double brown;\n    background: -webkit-gradient(linear, right top, left top, from(#fff3f5), color-stop(#9a9a9a), to(#666666));\n    background: linear-gradient(to left, #fff3f5, #9a9a9a, #666666);\n    position: relative;\n    left: 0%;\n    top: 40%;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-size: 1.1rem;\n    -webkit-box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n            box-shadow: 1px 0px 50px rgba(0, 0, 0, 0.5);\n    border-top-right-radius: 3%;\n  }\n  .wrapperInput {\n    margin-top: 5%;\n    font-size: 1.3rem;\n    text-align: center;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  }\n  .ownLevel {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[4];\n        grid-template-columns: repeat(4, 1fr);\n    width: 90%;\n    height: 80%;\n  }\n  .instrukcja {\n    text-align: center;\n  }\n  .h1FromInstruction {\n    text-align: center;\n    margin-bottom: 2%;\n    font-size: 1.4rem;\n  }\n  #idImage {\n    background-color: rgba(221, 20, 190, 0.5);\n    width: 60%;\n    text-align: center;\n    height: 50px;\n  }\n  #idImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #idImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .nazwaObrazka {\n    color: rgba(221, 20, 190, 0.5);\n    -webkit-text-stroke: 1px black;\n    font-weight: bold;\n  }\n  #addImage {\n    background-color: #ff6666;\n    color: black;\n    font-weight: bold;\n    text-align: center;\n    height: 100px;\n    width: 60%;\n  }\n  #addImage::-webkit-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage:-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::-ms-input-placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  #addImage::placeholder {\n    color: black;\n    font-weight: bold;\n  }\n  .adresDoimg {\n    color: #ff6666;\n  }\n  .infoJakSkopiowacObraz {\n    font-weight: bold;\n    font-size: 1.2rem;\n    -webkit-text-stroke: 0.5px blue;\n  }\n  .importantText {\n    font-weight: bold;\n    font-size: 1.2rem;\n    color: darkorange;\n  }\n  .wazne {\n    font-weight: bold;\n    -webkit-text-stroke: 1px black;\n  }\n  .pakButton {\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n  }\n  .btnAddImage {\n    width: 50%;\n    font-size: 2rem;\n    height: 10%;\n    padding: 2%;\n    margin-top: 5%;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddImage:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnAddLevel {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 50%;\n    height: 4%;\n    position: relative;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n    position: relative;\n  }\n  .btnAddLevel:hover {\n    background-color: black;\n    color: white;\n  }\n  .btnStart {\n    margin-top: 5%;\n    font-size: 2rem;\n    padding: 2%;\n    width: 50%;\n    height: 4%;\n    position: relative;\n    margin-bottom: 5%;\n    -webkit-transition: all 0.15s;\n    transition: all 0.15s;\n  }\n  .btnStart:hover {\n    background-color: black;\n    color: white;\n  }\n  .exampleImagesToAdd {\n    border: 1px solid black;\n    width: 40%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-columns: (1fr)[3];\n        grid-template-columns: repeat(3, 1fr);\n    background-color: #ff99ff;\n  }\n  .exampleImages {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n  .statement {\n    width: 80%;\n    height: 80%;\n    position: absolute;\n    top: 70%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .h1Statement {\n    text-align: center;\n    -webkit-text-stroke: 1px #999900;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .prefaceStatement {\n    font-size: 1.3rem;\n    margin: 3%;\n    text-align: center;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  }\n  .olPak {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    position: relative;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0);\n            transform: translate(-50%, 0);\n  }\n  .firstOl {\n    font-size: 1.2rem;\n    text-align: center;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  }\n  .firstOl:nth-child(2) {\n    background-color: #ffcfd8;\n    padding: 2%;\n    width: 50%;\n  }\n  .firstOl:nth-child(1) {\n    background-color: #ffcfd8;\n    position: relative;\n    border-right: 2px solid black;\n    padding: 2%;\n    font-size: 1.3rem;\n    width: 50%;\n  }\n  .li {\n    border-bottom: 1px dotted black;\n  }\n  .li:hover {\n    background-color: white;\n  }\n  .emStatement {\n    font-size: 1rem;\n    margin: 3%;\n    font-weight: bold;\n  }\n  .divUl {\n    border: 1px solid black;\n    text-align: center;\n    margin: 3%;\n    background: -webkit-gradient(linear, right top, left top, from(magenta), to(#666600));\n    background: linear-gradient(to left, magenta, #666600);\n    font-size: 1rem;\n    color: blue;\n    -webkit-text-stroke: 1px black;\n    background-color: red;\n    font-size: 1.2rem;\n    width: 100%;\n  }\n  .h5 {\n    margin-bottom: 10%;\n    padding-bottom: 10%;\n    font-size: 1.3rem;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  }\n  .li {\n    color: #660000;\n  }\n  .transitionContainer {\n    position: relative;\n  }\n  .textWhenPassLevel {\n    font-size: 3rem;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    text-align: center;\n    text-shadow: 3px 3px #ff3333;\n  }\n  .waitNextLvl {\n    text-align: center;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    -webkit-text-stroke: 1px solid darkorange;\n    position: absolute;\n    top: 20%;\n  }\n  .boxLoading {\n    width: 300px;\n    height: 200px;\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    display: flex;\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    left: 50%;\n    -webkit-transform: translate(-50%, 0%);\n            transform: translate(-50%, 0%);\n  }\n  .oneLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: oneL 0.5s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .twoLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: twoL 0.5s 0.15s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .threeLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: threeL 0.5s 0.25s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  .fourLoading {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n    animation: fourL 0.5s 0.35s infinite alternate-reverse cubic-bezier(0.645, 0.045, 0.355, 1);\n    margin: 5px;\n  }\n  @-webkit-keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes oneL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes twoL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes threeL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @-webkit-keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n  @keyframes fourL {\n    0% {\n      -webkit-transform: translateY(-50px);\n              transform: translateY(-50px);\n    }\n    100% {\n      -webkit-transform: translateY(0px);\n              transform: translateY(0px);\n    }\n  }\n}\n/*# sourceMappingURL=style.css.map */","",{version:3,sources:["webpack://./src/style.scss","webpack://./src/css/style.css"],names:[],mappings:"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",sourceRoot:""}]);const a=i},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",A=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),A&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),A&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,A,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(A)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);A&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),o="/*# ".concat(r," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},486:function(n,t,e){var A;n=e.nmd(n),function(){var r,o="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",s=32,l=128,u=1/0,C=9007199254740991,c=NaN,f=4294967295,d=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",s],["partialRight",64],["rearg",256]],p="[object Arguments]",B="[object Array]",g="[object Boolean]",I="[object Date]",m="[object Error]",h="[object Function]",b="[object GeneratorFunction]",k="[object Map]",w="[object Number]",E="[object Object]",x="[object Promise]",v="[object RegExp]",y="[object Set]",D="[object String]",Y="[object Symbol]",_="[object WeakMap]",z="[object ArrayBuffer]",M="[object DataView]",L="[object Float32Array]",W="[object Float64Array]",S="[object Int8Array]",U="[object Int16Array]",j="[object Int32Array]",F="[object Uint8Array]",q="[object Uint8ClampedArray]",X="[object Uint16Array]",T="[object Uint32Array]",R=/\b__p \+= '';/g,G=/\b(__p \+=) '' \+/g,Z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Q=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,O=RegExp(Q.source),P=RegExp(V.source),N=/<%-([\s\S]+?)%>/g,K=/<%([\s\S]+?)%>/g,H=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,$=/^\w*$/,nn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,tn=/[\\^$.*+?()[\]{}|]/g,en=RegExp(tn.source),An=/^\s+/,rn=/\s/,on=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,an=/\{\n\/\* \[wrapped with (.+)\] \*/,sn=/,? & /,ln=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,un=/[()=,{}\[\]\/\s]/,Cn=/\\(\\)?/g,cn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,fn=/\w*$/,dn=/^[-+]0x[0-9a-f]+$/i,pn=/^0b[01]+$/i,Bn=/^\[object .+?Constructor\]$/,gn=/^0o[0-7]+$/i,In=/^(?:0|[1-9]\d*)$/,mn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,hn=/($^)/,bn=/['\n\r\u2028\u2029\\]/g,kn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wn="a-z\\xdf-\\xf6\\xf8-\\xff",En="A-Z\\xc0-\\xd6\\xd8-\\xde",xn="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",vn="["+xn+"]",yn="["+kn+"]",Dn="\\d+",Yn="["+wn+"]",_n="[^\\ud800-\\udfff"+xn+Dn+"\\u2700-\\u27bf"+wn+En+"]",zn="\\ud83c[\\udffb-\\udfff]",Mn="[^\\ud800-\\udfff]",Ln="(?:\\ud83c[\\udde6-\\uddff]){2}",Wn="[\\ud800-\\udbff][\\udc00-\\udfff]",Sn="["+En+"]",Un="(?:"+Yn+"|"+_n+")",jn="(?:"+Sn+"|"+_n+")",Fn="(?:['’](?:d|ll|m|re|s|t|ve))?",qn="(?:['’](?:D|LL|M|RE|S|T|VE))?",Xn="(?:"+yn+"|"+zn+")?",Tn="[\\ufe0e\\ufe0f]?",Rn=Tn+Xn+"(?:\\u200d(?:"+[Mn,Ln,Wn].join("|")+")"+Tn+Xn+")*",Gn="(?:"+["[\\u2700-\\u27bf]",Ln,Wn].join("|")+")"+Rn,Zn="(?:"+[Mn+yn+"?",yn,Ln,Wn,"[\\ud800-\\udfff]"].join("|")+")",Qn=RegExp("['’]","g"),Vn=RegExp(yn,"g"),On=RegExp(zn+"(?="+zn+")|"+Zn+Rn,"g"),Pn=RegExp([Sn+"?"+Yn+"+"+Fn+"(?="+[vn,Sn,"$"].join("|")+")",jn+"+"+qn+"(?="+[vn,Sn+Un,"$"].join("|")+")",Sn+"?"+Un+"+"+Fn,Sn+"+"+qn,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Dn,Gn].join("|"),"g"),Nn=RegExp("[\\u200d\\ud800-\\udfff"+kn+"\\ufe0e\\ufe0f]"),Kn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Hn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Jn=-1,$n={};$n[L]=$n[W]=$n[S]=$n[U]=$n[j]=$n[F]=$n[q]=$n[X]=$n[T]=!0,$n[p]=$n[B]=$n[z]=$n[g]=$n[M]=$n[I]=$n[m]=$n[h]=$n[k]=$n[w]=$n[E]=$n[v]=$n[y]=$n[D]=$n[_]=!1;var nt={};nt[p]=nt[B]=nt[z]=nt[M]=nt[g]=nt[I]=nt[L]=nt[W]=nt[S]=nt[U]=nt[j]=nt[k]=nt[w]=nt[E]=nt[v]=nt[y]=nt[D]=nt[Y]=nt[F]=nt[q]=nt[X]=nt[T]=!0,nt[m]=nt[h]=nt[_]=!1;var tt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},et=parseFloat,At=parseInt,rt="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,ot="object"==typeof self&&self&&self.Object===Object&&self,it=rt||ot||Function("return this")(),at=t&&!t.nodeType&&t,st=at&&n&&!n.nodeType&&n,lt=st&&st.exports===at,ut=lt&&rt.process,Ct=function(){try{return st&&st.require&&st.require("util").types||ut&&ut.binding&&ut.binding("util")}catch(n){}}(),ct=Ct&&Ct.isArrayBuffer,ft=Ct&&Ct.isDate,dt=Ct&&Ct.isMap,pt=Ct&&Ct.isRegExp,Bt=Ct&&Ct.isSet,gt=Ct&&Ct.isTypedArray;function It(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function mt(n,t,e,A){for(var r=-1,o=null==n?0:n.length;++r<o;){var i=n[r];t(A,i,e(i),n)}return A}function ht(n,t){for(var e=-1,A=null==n?0:n.length;++e<A&&!1!==t(n[e],e,n););return n}function bt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function kt(n,t){for(var e=-1,A=null==n?0:n.length;++e<A;)if(!t(n[e],e,n))return!1;return!0}function wt(n,t){for(var e=-1,A=null==n?0:n.length,r=0,o=[];++e<A;){var i=n[e];t(i,e,n)&&(o[r++]=i)}return o}function Et(n,t){return!(null==n||!n.length)&&Wt(n,t,0)>-1}function xt(n,t,e){for(var A=-1,r=null==n?0:n.length;++A<r;)if(e(t,n[A]))return!0;return!1}function vt(n,t){for(var e=-1,A=null==n?0:n.length,r=Array(A);++e<A;)r[e]=t(n[e],e,n);return r}function yt(n,t){for(var e=-1,A=t.length,r=n.length;++e<A;)n[r+e]=t[e];return n}function Dt(n,t,e,A){var r=-1,o=null==n?0:n.length;for(A&&o&&(e=n[++r]);++r<o;)e=t(e,n[r],r,n);return e}function Yt(n,t,e,A){var r=null==n?0:n.length;for(A&&r&&(e=n[--r]);r--;)e=t(e,n[r],r,n);return e}function _t(n,t){for(var e=-1,A=null==n?0:n.length;++e<A;)if(t(n[e],e,n))return!0;return!1}var zt=Ft("length");function Mt(n,t,e){var A;return e(n,(function(n,e,r){if(t(n,e,r))return A=e,!1})),A}function Lt(n,t,e,A){for(var r=n.length,o=e+(A?1:-1);A?o--:++o<r;)if(t(n[o],o,n))return o;return-1}function Wt(n,t,e){return t==t?function(n,t,e){for(var A=e-1,r=n.length;++A<r;)if(n[A]===t)return A;return-1}(n,t,e):Lt(n,Ut,e)}function St(n,t,e,A){for(var r=e-1,o=n.length;++r<o;)if(A(n[r],t))return r;return-1}function Ut(n){return n!=n}function jt(n,t){var e=null==n?0:n.length;return e?Tt(n,t)/e:c}function Ft(n){return function(t){return null==t?r:t[n]}}function qt(n){return function(t){return null==n?r:n[t]}}function Xt(n,t,e,A,r){return r(n,(function(n,r,o){e=A?(A=!1,n):t(e,n,r,o)})),e}function Tt(n,t){for(var e,A=-1,o=n.length;++A<o;){var i=t(n[A]);i!==r&&(e=e===r?i:e+i)}return e}function Rt(n,t){for(var e=-1,A=Array(n);++e<n;)A[e]=t(e);return A}function Gt(n){return n?n.slice(0,ae(n)+1).replace(An,""):n}function Zt(n){return function(t){return n(t)}}function Qt(n,t){return vt(t,(function(t){return n[t]}))}function Vt(n,t){return n.has(t)}function Ot(n,t){for(var e=-1,A=n.length;++e<A&&Wt(t,n[e],0)>-1;);return e}function Pt(n,t){for(var e=n.length;e--&&Wt(t,n[e],0)>-1;);return e}function Nt(n,t){for(var e=n.length,A=0;e--;)n[e]===t&&++A;return A}var Kt=qt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Ht=qt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Jt(n){return"\\"+tt[n]}function $t(n){return Nn.test(n)}function ne(n){var t=-1,e=Array(n.size);return n.forEach((function(n,A){e[++t]=[A,n]})),e}function te(n,t){return function(e){return n(t(e))}}function ee(n,t){for(var e=-1,A=n.length,r=0,o=[];++e<A;){var i=n[e];i!==t&&i!==a||(n[e]=a,o[r++]=e)}return o}function Ae(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function re(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function oe(n){return $t(n)?function(n){for(var t=On.lastIndex=0;On.test(n);)++t;return t}(n):zt(n)}function ie(n){return $t(n)?function(n){return n.match(On)||[]}(n):function(n){return n.split("")}(n)}function ae(n){for(var t=n.length;t--&&rn.test(n.charAt(t)););return t}var se=qt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),le=function n(t){var e,A=(t=null==t?it:le.defaults(it.Object(),t,le.pick(it,Hn))).Array,rn=t.Date,kn=t.Error,wn=t.Function,En=t.Math,xn=t.Object,vn=t.RegExp,yn=t.String,Dn=t.TypeError,Yn=A.prototype,_n=wn.prototype,zn=xn.prototype,Mn=t["__core-js_shared__"],Ln=_n.toString,Wn=zn.hasOwnProperty,Sn=0,Un=(e=/[^.]+$/.exec(Mn&&Mn.keys&&Mn.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",jn=zn.toString,Fn=Ln.call(xn),qn=it._,Xn=vn("^"+Ln.call(Wn).replace(tn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Tn=lt?t.Buffer:r,Rn=t.Symbol,Gn=t.Uint8Array,Zn=Tn?Tn.allocUnsafe:r,On=te(xn.getPrototypeOf,xn),Nn=xn.create,tt=zn.propertyIsEnumerable,rt=Yn.splice,ot=Rn?Rn.isConcatSpreadable:r,at=Rn?Rn.iterator:r,st=Rn?Rn.toStringTag:r,ut=function(){try{var n=lo(xn,"defineProperty");return n({},"",{}),n}catch(n){}}(),Ct=t.clearTimeout!==it.clearTimeout&&t.clearTimeout,zt=rn&&rn.now!==it.Date.now&&rn.now,qt=t.setTimeout!==it.setTimeout&&t.setTimeout,ue=En.ceil,Ce=En.floor,ce=xn.getOwnPropertySymbols,fe=Tn?Tn.isBuffer:r,de=t.isFinite,pe=Yn.join,Be=te(xn.keys,xn),ge=En.max,Ie=En.min,me=rn.now,he=t.parseInt,be=En.random,ke=Yn.reverse,we=lo(t,"DataView"),Ee=lo(t,"Map"),xe=lo(t,"Promise"),ve=lo(t,"Set"),ye=lo(t,"WeakMap"),De=lo(xn,"create"),Ye=ye&&new ye,_e={},ze=qo(we),Me=qo(Ee),Le=qo(xe),We=qo(ve),Se=qo(ye),Ue=Rn?Rn.prototype:r,je=Ue?Ue.valueOf:r,Fe=Ue?Ue.toString:r;function qe(n){if(ea(n)&&!Qi(n)&&!(n instanceof Ge)){if(n instanceof Re)return n;if(Wn.call(n,"__wrapped__"))return Xo(n)}return new Re(n)}var Xe=function(){function n(){}return function(t){if(!ta(t))return{};if(Nn)return Nn(t);n.prototype=t;var e=new n;return n.prototype=r,e}}();function Te(){}function Re(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=r}function Ge(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=f,this.__views__=[]}function Ze(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var A=n[t];this.set(A[0],A[1])}}function Qe(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var A=n[t];this.set(A[0],A[1])}}function Ve(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var A=n[t];this.set(A[0],A[1])}}function Oe(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Ve;++t<e;)this.add(n[t])}function Pe(n){var t=this.__data__=new Qe(n);this.size=t.size}function Ne(n,t){var e=Qi(n),A=!e&&Zi(n),r=!e&&!A&&Ni(n),o=!e&&!A&&!r&&ua(n),i=e||A||r||o,a=i?Rt(n.length,yn):[],s=a.length;for(var l in n)!t&&!Wn.call(n,l)||i&&("length"==l||r&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||go(l,s))||a.push(l);return a}function Ke(n){var t=n.length;return t?n[VA(0,t-1)]:r}function He(n,t){return Wo(yr(n),iA(t,0,n.length))}function Je(n){return Wo(yr(n))}function $e(n,t,e){(e!==r&&!Ti(n[t],e)||e===r&&!(t in n))&&rA(n,t,e)}function nA(n,t,e){var A=n[t];Wn.call(n,t)&&Ti(A,e)&&(e!==r||t in n)||rA(n,t,e)}function tA(n,t){for(var e=n.length;e--;)if(Ti(n[e][0],t))return e;return-1}function eA(n,t,e,A){return CA(n,(function(n,r,o){t(A,n,e(n),o)})),A}function AA(n,t){return n&&Dr(t,Ma(t),n)}function rA(n,t,e){"__proto__"==t&&ut?ut(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function oA(n,t){for(var e=-1,o=t.length,i=A(o),a=null==n;++e<o;)i[e]=a?r:ya(n,t[e]);return i}function iA(n,t,e){return n==n&&(e!==r&&(n=n<=e?n:e),t!==r&&(n=n>=t?n:t)),n}function aA(n,t,e,A,o,i){var a,s=1&t,l=2&t,u=4&t;if(e&&(a=o?e(n,A,o,i):e(n)),a!==r)return a;if(!ta(n))return n;var C=Qi(n);if(C){if(a=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&Wn.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!s)return yr(n,a)}else{var c=co(n),f=c==h||c==b;if(Ni(n))return br(n,s);if(c==E||c==p||f&&!o){if(a=l||f?{}:po(n),!s)return l?function(n,t){return Dr(n,Co(n),t)}(n,function(n,t){return n&&Dr(t,La(t),n)}(a,n)):function(n,t){return Dr(n,uo(n),t)}(n,AA(a,n))}else{if(!nt[c])return o?n:{};a=function(n,t,e){var A,r=n.constructor;switch(t){case z:return kr(n);case g:case I:return new r(+n);case M:return function(n,t){var e=t?kr(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case L:case W:case S:case U:case j:case F:case q:case X:case T:return wr(n,e);case k:return new r;case w:case D:return new r(n);case v:return function(n){var t=new n.constructor(n.source,fn.exec(n));return t.lastIndex=n.lastIndex,t}(n);case y:return new r;case Y:return A=n,je?xn(je.call(A)):{}}}(n,c,s)}}i||(i=new Pe);var d=i.get(n);if(d)return d;i.set(n,a),aa(n)?n.forEach((function(A){a.add(aA(A,t,e,A,n,i))})):Aa(n)&&n.forEach((function(A,r){a.set(r,aA(A,t,e,r,n,i))}));var B=C?r:(u?l?eo:to:l?La:Ma)(n);return ht(B||n,(function(A,r){B&&(A=n[r=A]),nA(a,r,aA(A,t,e,r,n,i))})),a}function sA(n,t,e){var A=e.length;if(null==n)return!A;for(n=xn(n);A--;){var o=e[A],i=t[o],a=n[o];if(a===r&&!(o in n)||!i(a))return!1}return!0}function lA(n,t,e){if("function"!=typeof n)throw new Dn(o);return _o((function(){n.apply(r,e)}),t)}function uA(n,t,e,A){var r=-1,o=Et,i=!0,a=n.length,s=[],l=t.length;if(!a)return s;e&&(t=vt(t,Zt(e))),A?(o=xt,i=!1):t.length>=200&&(o=Vt,i=!1,t=new Oe(t));n:for(;++r<a;){var u=n[r],C=null==e?u:e(u);if(u=A||0!==u?u:0,i&&C==C){for(var c=l;c--;)if(t[c]===C)continue n;s.push(u)}else o(t,C,A)||s.push(u)}return s}qe.templateSettings={escape:N,evaluate:K,interpolate:H,variable:"",imports:{_:qe}},qe.prototype=Te.prototype,qe.prototype.constructor=qe,Re.prototype=Xe(Te.prototype),Re.prototype.constructor=Re,Ge.prototype=Xe(Te.prototype),Ge.prototype.constructor=Ge,Ze.prototype.clear=function(){this.__data__=De?De(null):{},this.size=0},Ze.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},Ze.prototype.get=function(n){var t=this.__data__;if(De){var e=t[n];return e===i?r:e}return Wn.call(t,n)?t[n]:r},Ze.prototype.has=function(n){var t=this.__data__;return De?t[n]!==r:Wn.call(t,n)},Ze.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=De&&t===r?i:t,this},Qe.prototype.clear=function(){this.__data__=[],this.size=0},Qe.prototype.delete=function(n){var t=this.__data__,e=tA(t,n);return!(e<0||(e==t.length-1?t.pop():rt.call(t,e,1),--this.size,0))},Qe.prototype.get=function(n){var t=this.__data__,e=tA(t,n);return e<0?r:t[e][1]},Qe.prototype.has=function(n){return tA(this.__data__,n)>-1},Qe.prototype.set=function(n,t){var e=this.__data__,A=tA(e,n);return A<0?(++this.size,e.push([n,t])):e[A][1]=t,this},Ve.prototype.clear=function(){this.size=0,this.__data__={hash:new Ze,map:new(Ee||Qe),string:new Ze}},Ve.prototype.delete=function(n){var t=ao(this,n).delete(n);return this.size-=t?1:0,t},Ve.prototype.get=function(n){return ao(this,n).get(n)},Ve.prototype.has=function(n){return ao(this,n).has(n)},Ve.prototype.set=function(n,t){var e=ao(this,n),A=e.size;return e.set(n,t),this.size+=e.size==A?0:1,this},Oe.prototype.add=Oe.prototype.push=function(n){return this.__data__.set(n,i),this},Oe.prototype.has=function(n){return this.__data__.has(n)},Pe.prototype.clear=function(){this.__data__=new Qe,this.size=0},Pe.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},Pe.prototype.get=function(n){return this.__data__.get(n)},Pe.prototype.has=function(n){return this.__data__.has(n)},Pe.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Qe){var A=e.__data__;if(!Ee||A.length<199)return A.push([n,t]),this.size=++e.size,this;e=this.__data__=new Ve(A)}return e.set(n,t),this.size=e.size,this};var CA=zr(mA),cA=zr(hA,!0);function fA(n,t){var e=!0;return CA(n,(function(n,A,r){return e=!!t(n,A,r)})),e}function dA(n,t,e){for(var A=-1,o=n.length;++A<o;){var i=n[A],a=t(i);if(null!=a&&(s===r?a==a&&!la(a):e(a,s)))var s=a,l=i}return l}function pA(n,t){var e=[];return CA(n,(function(n,A,r){t(n,A,r)&&e.push(n)})),e}function BA(n,t,e,A,r){var o=-1,i=n.length;for(e||(e=Bo),r||(r=[]);++o<i;){var a=n[o];t>0&&e(a)?t>1?BA(a,t-1,e,A,r):yt(r,a):A||(r[r.length]=a)}return r}var gA=Mr(),IA=Mr(!0);function mA(n,t){return n&&gA(n,t,Ma)}function hA(n,t){return n&&IA(n,t,Ma)}function bA(n,t){return wt(t,(function(t){return Ji(n[t])}))}function kA(n,t){for(var e=0,A=(t=gr(t,n)).length;null!=n&&e<A;)n=n[Fo(t[e++])];return e&&e==A?n:r}function wA(n,t,e){var A=t(n);return Qi(n)?A:yt(A,e(n))}function EA(n){return null==n?n===r?"[object Undefined]":"[object Null]":st&&st in xn(n)?function(n){var t=Wn.call(n,st),e=n[st];try{n[st]=r;var A=!0}catch(n){}var o=jn.call(n);return A&&(t?n[st]=e:delete n[st]),o}(n):function(n){return jn.call(n)}(n)}function xA(n,t){return n>t}function vA(n,t){return null!=n&&Wn.call(n,t)}function yA(n,t){return null!=n&&t in xn(n)}function DA(n,t,e){for(var o=e?xt:Et,i=n[0].length,a=n.length,s=a,l=A(a),u=1/0,C=[];s--;){var c=n[s];s&&t&&(c=vt(c,Zt(t))),u=Ie(c.length,u),l[s]=!e&&(t||i>=120&&c.length>=120)?new Oe(s&&c):r}c=n[0];var f=-1,d=l[0];n:for(;++f<i&&C.length<u;){var p=c[f],B=t?t(p):p;if(p=e||0!==p?p:0,!(d?Vt(d,B):o(C,B,e))){for(s=a;--s;){var g=l[s];if(!(g?Vt(g,B):o(n[s],B,e)))continue n}d&&d.push(B),C.push(p)}}return C}function YA(n,t,e){var A=null==(n=vo(n,t=gr(t,n)))?n:n[Fo(Ho(t))];return null==A?r:It(A,n,e)}function _A(n){return ea(n)&&EA(n)==p}function zA(n,t,e,A,o){return n===t||(null==n||null==t||!ea(n)&&!ea(t)?n!=n&&t!=t:function(n,t,e,A,o,i){var a=Qi(n),s=Qi(t),l=a?B:co(n),u=s?B:co(t),C=(l=l==p?E:l)==E,c=(u=u==p?E:u)==E,f=l==u;if(f&&Ni(n)){if(!Ni(t))return!1;a=!0,C=!1}if(f&&!C)return i||(i=new Pe),a||ua(n)?$r(n,t,e,A,o,i):function(n,t,e,A,r,o,i){switch(e){case M:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case z:return!(n.byteLength!=t.byteLength||!o(new Gn(n),new Gn(t)));case g:case I:case w:return Ti(+n,+t);case m:return n.name==t.name&&n.message==t.message;case v:case D:return n==t+"";case k:var a=ne;case y:var s=1&A;if(a||(a=Ae),n.size!=t.size&&!s)return!1;var l=i.get(n);if(l)return l==t;A|=2,i.set(n,t);var u=$r(a(n),a(t),A,r,o,i);return i.delete(n),u;case Y:if(je)return je.call(n)==je.call(t)}return!1}(n,t,l,e,A,o,i);if(!(1&e)){var d=C&&Wn.call(n,"__wrapped__"),h=c&&Wn.call(t,"__wrapped__");if(d||h){var b=d?n.value():n,x=h?t.value():t;return i||(i=new Pe),o(b,x,e,A,i)}}return!!f&&(i||(i=new Pe),function(n,t,e,A,o,i){var a=1&e,s=to(n),l=s.length;if(l!=to(t).length&&!a)return!1;for(var u=l;u--;){var C=s[u];if(!(a?C in t:Wn.call(t,C)))return!1}var c=i.get(n),f=i.get(t);if(c&&f)return c==t&&f==n;var d=!0;i.set(n,t),i.set(t,n);for(var p=a;++u<l;){var B=n[C=s[u]],g=t[C];if(A)var I=a?A(g,B,C,t,n,i):A(B,g,C,n,t,i);if(!(I===r?B===g||o(B,g,e,A,i):I)){d=!1;break}p||(p="constructor"==C)}if(d&&!p){var m=n.constructor,h=t.constructor;m==h||!("constructor"in n)||!("constructor"in t)||"function"==typeof m&&m instanceof m&&"function"==typeof h&&h instanceof h||(d=!1)}return i.delete(n),i.delete(t),d}(n,t,e,A,o,i))}(n,t,e,A,zA,o))}function MA(n,t,e,A){var o=e.length,i=o,a=!A;if(null==n)return!i;for(n=xn(n);o--;){var s=e[o];if(a&&s[2]?s[1]!==n[s[0]]:!(s[0]in n))return!1}for(;++o<i;){var l=(s=e[o])[0],u=n[l],C=s[1];if(a&&s[2]){if(u===r&&!(l in n))return!1}else{var c=new Pe;if(A)var f=A(u,C,l,n,t,c);if(!(f===r?zA(C,u,3,A,c):f))return!1}}return!0}function LA(n){return!(!ta(n)||(t=n,Un&&Un in t))&&(Ji(n)?Xn:Bn).test(qo(n));var t}function WA(n){return"function"==typeof n?n:null==n?rs:"object"==typeof n?Qi(n)?qA(n[0],n[1]):FA(n):fs(n)}function SA(n){if(!ko(n))return Be(n);var t=[];for(var e in xn(n))Wn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function UA(n,t){return n<t}function jA(n,t){var e=-1,r=Oi(n)?A(n.length):[];return CA(n,(function(n,A,o){r[++e]=t(n,A,o)})),r}function FA(n){var t=so(n);return 1==t.length&&t[0][2]?Eo(t[0][0],t[0][1]):function(e){return e===n||MA(e,n,t)}}function qA(n,t){return mo(n)&&wo(t)?Eo(Fo(n),t):function(e){var A=ya(e,n);return A===r&&A===t?Da(e,n):zA(t,A,3)}}function XA(n,t,e,A,o){n!==t&&gA(t,(function(i,a){if(o||(o=new Pe),ta(i))!function(n,t,e,A,o,i,a){var s=Do(n,e),l=Do(t,e),u=a.get(l);if(u)$e(n,e,u);else{var C=i?i(s,l,e+"",n,t,a):r,c=C===r;if(c){var f=Qi(l),d=!f&&Ni(l),p=!f&&!d&&ua(l);C=l,f||d||p?Qi(s)?C=s:Pi(s)?C=yr(s):d?(c=!1,C=br(l,!0)):p?(c=!1,C=wr(l,!0)):C=[]:oa(l)||Zi(l)?(C=s,Zi(s)?C=Ia(s):ta(s)&&!Ji(s)||(C=po(l))):c=!1}c&&(a.set(l,C),o(C,l,A,i,a),a.delete(l)),$e(n,e,C)}}(n,t,a,e,XA,A,o);else{var s=A?A(Do(n,a),i,a+"",n,t,o):r;s===r&&(s=i),$e(n,a,s)}}),La)}function TA(n,t){var e=n.length;if(e)return go(t+=t<0?e:0,e)?n[t]:r}function RA(n,t,e){t=t.length?vt(t,(function(n){return Qi(n)?function(t){return kA(t,1===n.length?n[0]:n)}:n})):[rs];var A=-1;t=vt(t,Zt(io()));var r=jA(n,(function(n,e,r){var o=vt(t,(function(t){return t(n)}));return{criteria:o,index:++A,value:n}}));return function(n,t){var A=n.length;for(n.sort((function(n,t){return function(n,t,e){for(var A=-1,r=n.criteria,o=t.criteria,i=r.length,a=e.length;++A<i;){var s=Er(r[A],o[A]);if(s)return A>=a?s:s*("desc"==e[A]?-1:1)}return n.index-t.index}(n,t,e)}));A--;)n[A]=n[A].value;return n}(r)}function GA(n,t,e){for(var A=-1,r=t.length,o={};++A<r;){var i=t[A],a=kA(n,i);e(a,i)&&HA(o,gr(i,n),a)}return o}function ZA(n,t,e,A){var r=A?St:Wt,o=-1,i=t.length,a=n;for(n===t&&(t=yr(t)),e&&(a=vt(n,Zt(e)));++o<i;)for(var s=0,l=t[o],u=e?e(l):l;(s=r(a,u,s,A))>-1;)a!==n&&rt.call(a,s,1),rt.call(n,s,1);return n}function QA(n,t){for(var e=n?t.length:0,A=e-1;e--;){var r=t[e];if(e==A||r!==o){var o=r;go(r)?rt.call(n,r,1):lr(n,r)}}return n}function VA(n,t){return n+Ce(be()*(t-n+1))}function OA(n,t){var e="";if(!n||t<1||t>C)return e;do{t%2&&(e+=n),(t=Ce(t/2))&&(n+=n)}while(t);return e}function PA(n,t){return zo(xo(n,t,rs),n+"")}function NA(n){return Ke(Ta(n))}function KA(n,t){var e=Ta(n);return Wo(e,iA(t,0,e.length))}function HA(n,t,e,A){if(!ta(n))return n;for(var o=-1,i=(t=gr(t,n)).length,a=i-1,s=n;null!=s&&++o<i;){var l=Fo(t[o]),u=e;if("__proto__"===l||"constructor"===l||"prototype"===l)return n;if(o!=a){var C=s[l];(u=A?A(C,l,s):r)===r&&(u=ta(C)?C:go(t[o+1])?[]:{})}nA(s,l,u),s=s[l]}return n}var JA=Ye?function(n,t){return Ye.set(n,t),n}:rs,$A=ut?function(n,t){return ut(n,"toString",{configurable:!0,enumerable:!1,value:ts(t),writable:!0})}:rs;function nr(n){return Wo(Ta(n))}function tr(n,t,e){var r=-1,o=n.length;t<0&&(t=-t>o?0:o+t),(e=e>o?o:e)<0&&(e+=o),o=t>e?0:e-t>>>0,t>>>=0;for(var i=A(o);++r<o;)i[r]=n[r+t];return i}function er(n,t){var e;return CA(n,(function(n,A,r){return!(e=t(n,A,r))})),!!e}function Ar(n,t,e){var A=0,r=null==n?A:n.length;if("number"==typeof t&&t==t&&r<=2147483647){for(;A<r;){var o=A+r>>>1,i=n[o];null!==i&&!la(i)&&(e?i<=t:i<t)?A=o+1:r=o}return r}return rr(n,t,rs,e)}function rr(n,t,e,A){var o=0,i=null==n?0:n.length;if(0===i)return 0;for(var a=(t=e(t))!=t,s=null===t,l=la(t),u=t===r;o<i;){var C=Ce((o+i)/2),c=e(n[C]),f=c!==r,d=null===c,p=c==c,B=la(c);if(a)var g=A||p;else g=u?p&&(A||f):s?p&&f&&(A||!d):l?p&&f&&!d&&(A||!B):!d&&!B&&(A?c<=t:c<t);g?o=C+1:i=C}return Ie(i,4294967294)}function or(n,t){for(var e=-1,A=n.length,r=0,o=[];++e<A;){var i=n[e],a=t?t(i):i;if(!e||!Ti(a,s)){var s=a;o[r++]=0===i?0:i}}return o}function ir(n){return"number"==typeof n?n:la(n)?c:+n}function ar(n){if("string"==typeof n)return n;if(Qi(n))return vt(n,ar)+"";if(la(n))return Fe?Fe.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function sr(n,t,e){var A=-1,r=Et,o=n.length,i=!0,a=[],s=a;if(e)i=!1,r=xt;else if(o>=200){var l=t?null:Or(n);if(l)return Ae(l);i=!1,r=Vt,s=new Oe}else s=t?[]:a;n:for(;++A<o;){var u=n[A],C=t?t(u):u;if(u=e||0!==u?u:0,i&&C==C){for(var c=s.length;c--;)if(s[c]===C)continue n;t&&s.push(C),a.push(u)}else r(s,C,e)||(s!==a&&s.push(C),a.push(u))}return a}function lr(n,t){return null==(n=vo(n,t=gr(t,n)))||delete n[Fo(Ho(t))]}function ur(n,t,e,A){return HA(n,t,e(kA(n,t)),A)}function Cr(n,t,e,A){for(var r=n.length,o=A?r:-1;(A?o--:++o<r)&&t(n[o],o,n););return e?tr(n,A?0:o,A?o+1:r):tr(n,A?o+1:0,A?r:o)}function cr(n,t){var e=n;return e instanceof Ge&&(e=e.value()),Dt(t,(function(n,t){return t.func.apply(t.thisArg,yt([n],t.args))}),e)}function fr(n,t,e){var r=n.length;if(r<2)return r?sr(n[0]):[];for(var o=-1,i=A(r);++o<r;)for(var a=n[o],s=-1;++s<r;)s!=o&&(i[o]=uA(i[o]||a,n[s],t,e));return sr(BA(i,1),t,e)}function dr(n,t,e){for(var A=-1,o=n.length,i=t.length,a={};++A<o;){var s=A<i?t[A]:r;e(a,n[A],s)}return a}function pr(n){return Pi(n)?n:[]}function Br(n){return"function"==typeof n?n:rs}function gr(n,t){return Qi(n)?n:mo(n,t)?[n]:jo(ma(n))}var Ir=PA;function mr(n,t,e){var A=n.length;return e=e===r?A:e,!t&&e>=A?n:tr(n,t,e)}var hr=Ct||function(n){return it.clearTimeout(n)};function br(n,t){if(t)return n.slice();var e=n.length,A=Zn?Zn(e):new n.constructor(e);return n.copy(A),A}function kr(n){var t=new n.constructor(n.byteLength);return new Gn(t).set(new Gn(n)),t}function wr(n,t){var e=t?kr(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function Er(n,t){if(n!==t){var e=n!==r,A=null===n,o=n==n,i=la(n),a=t!==r,s=null===t,l=t==t,u=la(t);if(!s&&!u&&!i&&n>t||i&&a&&l&&!s&&!u||A&&a&&l||!e&&l||!o)return 1;if(!A&&!i&&!u&&n<t||u&&e&&o&&!A&&!i||s&&e&&o||!a&&o||!l)return-1}return 0}function xr(n,t,e,r){for(var o=-1,i=n.length,a=e.length,s=-1,l=t.length,u=ge(i-a,0),C=A(l+u),c=!r;++s<l;)C[s]=t[s];for(;++o<a;)(c||o<i)&&(C[e[o]]=n[o]);for(;u--;)C[s++]=n[o++];return C}function vr(n,t,e,r){for(var o=-1,i=n.length,a=-1,s=e.length,l=-1,u=t.length,C=ge(i-s,0),c=A(C+u),f=!r;++o<C;)c[o]=n[o];for(var d=o;++l<u;)c[d+l]=t[l];for(;++a<s;)(f||o<i)&&(c[d+e[a]]=n[o++]);return c}function yr(n,t){var e=-1,r=n.length;for(t||(t=A(r));++e<r;)t[e]=n[e];return t}function Dr(n,t,e,A){var o=!e;e||(e={});for(var i=-1,a=t.length;++i<a;){var s=t[i],l=A?A(e[s],n[s],s,e,n):r;l===r&&(l=n[s]),o?rA(e,s,l):nA(e,s,l)}return e}function Yr(n,t){return function(e,A){var r=Qi(e)?mt:eA,o=t?t():{};return r(e,n,io(A,2),o)}}function _r(n){return PA((function(t,e){var A=-1,o=e.length,i=o>1?e[o-1]:r,a=o>2?e[2]:r;for(i=n.length>3&&"function"==typeof i?(o--,i):r,a&&Io(e[0],e[1],a)&&(i=o<3?r:i,o=1),t=xn(t);++A<o;){var s=e[A];s&&n(t,s,A,i)}return t}))}function zr(n,t){return function(e,A){if(null==e)return e;if(!Oi(e))return n(e,A);for(var r=e.length,o=t?r:-1,i=xn(e);(t?o--:++o<r)&&!1!==A(i[o],o,i););return e}}function Mr(n){return function(t,e,A){for(var r=-1,o=xn(t),i=A(t),a=i.length;a--;){var s=i[n?a:++r];if(!1===e(o[s],s,o))break}return t}}function Lr(n){return function(t){var e=$t(t=ma(t))?ie(t):r,A=e?e[0]:t.charAt(0),o=e?mr(e,1).join(""):t.slice(1);return A[n]()+o}}function Wr(n){return function(t){return Dt(Ja(Za(t).replace(Qn,"")),n,"")}}function Sr(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=Xe(n.prototype),A=n.apply(e,t);return ta(A)?A:e}}function Ur(n){return function(t,e,A){var o=xn(t);if(!Oi(t)){var i=io(e,3);t=Ma(t),e=function(n){return i(o[n],n,o)}}var a=n(t,e,A);return a>-1?o[i?t[a]:a]:r}}function jr(n){return no((function(t){var e=t.length,A=e,i=Re.prototype.thru;for(n&&t.reverse();A--;){var a=t[A];if("function"!=typeof a)throw new Dn(o);if(i&&!s&&"wrapper"==ro(a))var s=new Re([],!0)}for(A=s?A:e;++A<e;){var l=ro(a=t[A]),u="wrapper"==l?Ao(a):r;s=u&&ho(u[0])&&424==u[1]&&!u[4].length&&1==u[9]?s[ro(u[0])].apply(s,u[3]):1==a.length&&ho(a)?s[l]():s.thru(a)}return function(){var n=arguments,A=n[0];if(s&&1==n.length&&Qi(A))return s.plant(A).value();for(var r=0,o=e?t[r].apply(this,n):A;++r<e;)o=t[r].call(this,o);return o}}))}function Fr(n,t,e,o,i,a,s,u,C,c){var f=t&l,d=1&t,p=2&t,B=24&t,g=512&t,I=p?r:Sr(n);return function r(){for(var l=arguments.length,m=A(l),h=l;h--;)m[h]=arguments[h];if(B)var b=oo(r),k=Nt(m,b);if(o&&(m=xr(m,o,i,B)),a&&(m=vr(m,a,s,B)),l-=k,B&&l<c){var w=ee(m,b);return Qr(n,t,Fr,r.placeholder,e,m,w,u,C,c-l)}var E=d?e:this,x=p?E[n]:n;return l=m.length,u?m=yo(m,u):g&&l>1&&m.reverse(),f&&C<l&&(m.length=C),this&&this!==it&&this instanceof r&&(x=I||Sr(x)),x.apply(E,m)}}function qr(n,t){return function(e,A){return function(n,t,e,A){return mA(n,(function(n,r,o){t(A,e(n),r,o)})),A}(e,n,t(A),{})}}function Xr(n,t){return function(e,A){var o;if(e===r&&A===r)return t;if(e!==r&&(o=e),A!==r){if(o===r)return A;"string"==typeof e||"string"==typeof A?(e=ar(e),A=ar(A)):(e=ir(e),A=ir(A)),o=n(e,A)}return o}}function Tr(n){return no((function(t){return t=vt(t,Zt(io())),PA((function(e){var A=this;return n(t,(function(n){return It(n,A,e)}))}))}))}function Rr(n,t){var e=(t=t===r?" ":ar(t)).length;if(e<2)return e?OA(t,n):t;var A=OA(t,ue(n/oe(t)));return $t(t)?mr(ie(A),0,n).join(""):A.slice(0,n)}function Gr(n){return function(t,e,o){return o&&"number"!=typeof o&&Io(t,e,o)&&(e=o=r),t=da(t),e===r?(e=t,t=0):e=da(e),function(n,t,e,r){for(var o=-1,i=ge(ue((t-n)/(e||1)),0),a=A(i);i--;)a[r?i:++o]=n,n+=e;return a}(t,e,o=o===r?t<e?1:-1:da(o),n)}}function Zr(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=ga(t),e=ga(e)),n(t,e)}}function Qr(n,t,e,A,o,i,a,l,u,C){var c=8&t;t|=c?s:64,4&(t&=~(c?64:s))||(t&=-4);var f=[n,t,o,c?i:r,c?a:r,c?r:i,c?r:a,l,u,C],d=e.apply(r,f);return ho(n)&&Yo(d,f),d.placeholder=A,Mo(d,n,t)}function Vr(n){var t=En[n];return function(n,e){if(n=ga(n),(e=null==e?0:Ie(pa(e),292))&&de(n)){var A=(ma(n)+"e").split("e");return+((A=(ma(t(A[0]+"e"+(+A[1]+e)))+"e").split("e"))[0]+"e"+(+A[1]-e))}return t(n)}}var Or=ve&&1/Ae(new ve([,-0]))[1]==u?function(n){return new ve(n)}:ls;function Pr(n){return function(t){var e=co(t);return e==k?ne(t):e==y?re(t):function(n,t){return vt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Nr(n,t,e,i,u,C,c,f){var d=2&t;if(!d&&"function"!=typeof n)throw new Dn(o);var p=i?i.length:0;if(p||(t&=-97,i=u=r),c=c===r?c:ge(pa(c),0),f=f===r?f:pa(f),p-=u?u.length:0,64&t){var B=i,g=u;i=u=r}var I=d?r:Ao(n),m=[n,t,e,i,u,B,g,C,c,f];if(I&&function(n,t){var e=n[1],A=t[1],r=e|A,o=r<131,i=A==l&&8==e||A==l&&256==e&&n[7].length<=t[8]||384==A&&t[7].length<=t[8]&&8==e;if(!o&&!i)return n;1&A&&(n[2]=t[2],r|=1&e?0:4);var s=t[3];if(s){var u=n[3];n[3]=u?xr(u,s,t[4]):s,n[4]=u?ee(n[3],a):t[4]}(s=t[5])&&(u=n[5],n[5]=u?vr(u,s,t[6]):s,n[6]=u?ee(n[5],a):t[6]),(s=t[7])&&(n[7]=s),A&l&&(n[8]=null==n[8]?t[8]:Ie(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=r}(m,I),n=m[0],t=m[1],e=m[2],i=m[3],u=m[4],!(f=m[9]=m[9]===r?d?0:n.length:ge(m[9]-p,0))&&24&t&&(t&=-25),t&&1!=t)h=8==t||16==t?function(n,t,e){var o=Sr(n);return function i(){for(var a=arguments.length,s=A(a),l=a,u=oo(i);l--;)s[l]=arguments[l];var C=a<3&&s[0]!==u&&s[a-1]!==u?[]:ee(s,u);return(a-=C.length)<e?Qr(n,t,Fr,i.placeholder,r,s,C,r,r,e-a):It(this&&this!==it&&this instanceof i?o:n,this,s)}}(n,t,f):t!=s&&33!=t||u.length?Fr.apply(r,m):function(n,t,e,r){var o=1&t,i=Sr(n);return function t(){for(var a=-1,s=arguments.length,l=-1,u=r.length,C=A(u+s),c=this&&this!==it&&this instanceof t?i:n;++l<u;)C[l]=r[l];for(;s--;)C[l++]=arguments[++a];return It(c,o?e:this,C)}}(n,t,e,i);else var h=function(n,t,e){var A=1&t,r=Sr(n);return function t(){return(this&&this!==it&&this instanceof t?r:n).apply(A?e:this,arguments)}}(n,t,e);return Mo((I?JA:Yo)(h,m),n,t)}function Kr(n,t,e,A){return n===r||Ti(n,zn[e])&&!Wn.call(A,e)?t:n}function Hr(n,t,e,A,o,i){return ta(n)&&ta(t)&&(i.set(t,n),XA(n,t,r,Hr,i),i.delete(t)),n}function Jr(n){return oa(n)?r:n}function $r(n,t,e,A,o,i){var a=1&e,s=n.length,l=t.length;if(s!=l&&!(a&&l>s))return!1;var u=i.get(n),C=i.get(t);if(u&&C)return u==t&&C==n;var c=-1,f=!0,d=2&e?new Oe:r;for(i.set(n,t),i.set(t,n);++c<s;){var p=n[c],B=t[c];if(A)var g=a?A(B,p,c,t,n,i):A(p,B,c,n,t,i);if(g!==r){if(g)continue;f=!1;break}if(d){if(!_t(t,(function(n,t){if(!Vt(d,t)&&(p===n||o(p,n,e,A,i)))return d.push(t)}))){f=!1;break}}else if(p!==B&&!o(p,B,e,A,i)){f=!1;break}}return i.delete(n),i.delete(t),f}function no(n){return zo(xo(n,r,Vo),n+"")}function to(n){return wA(n,Ma,uo)}function eo(n){return wA(n,La,Co)}var Ao=Ye?function(n){return Ye.get(n)}:ls;function ro(n){for(var t=n.name+"",e=_e[t],A=Wn.call(_e,t)?e.length:0;A--;){var r=e[A],o=r.func;if(null==o||o==n)return r.name}return t}function oo(n){return(Wn.call(qe,"placeholder")?qe:n).placeholder}function io(){var n=qe.iteratee||os;return n=n===os?WA:n,arguments.length?n(arguments[0],arguments[1]):n}function ao(n,t){var e,A,r=n.__data__;return("string"==(A=typeof(e=t))||"number"==A||"symbol"==A||"boolean"==A?"__proto__"!==e:null===e)?r["string"==typeof t?"string":"hash"]:r.map}function so(n){for(var t=Ma(n),e=t.length;e--;){var A=t[e],r=n[A];t[e]=[A,r,wo(r)]}return t}function lo(n,t){var e=function(n,t){return null==n?r:n[t]}(n,t);return LA(e)?e:r}var uo=ce?function(n){return null==n?[]:(n=xn(n),wt(ce(n),(function(t){return tt.call(n,t)})))}:Bs,Co=ce?function(n){for(var t=[];n;)yt(t,uo(n)),n=On(n);return t}:Bs,co=EA;function fo(n,t,e){for(var A=-1,r=(t=gr(t,n)).length,o=!1;++A<r;){var i=Fo(t[A]);if(!(o=null!=n&&e(n,i)))break;n=n[i]}return o||++A!=r?o:!!(r=null==n?0:n.length)&&na(r)&&go(i,r)&&(Qi(n)||Zi(n))}function po(n){return"function"!=typeof n.constructor||ko(n)?{}:Xe(On(n))}function Bo(n){return Qi(n)||Zi(n)||!!(ot&&n&&n[ot])}function go(n,t){var e=typeof n;return!!(t=null==t?C:t)&&("number"==e||"symbol"!=e&&In.test(n))&&n>-1&&n%1==0&&n<t}function Io(n,t,e){if(!ta(e))return!1;var A=typeof t;return!!("number"==A?Oi(e)&&go(t,e.length):"string"==A&&t in e)&&Ti(e[t],n)}function mo(n,t){if(Qi(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!la(n))||$.test(n)||!J.test(n)||null!=t&&n in xn(t)}function ho(n){var t=ro(n),e=qe[t];if("function"!=typeof e||!(t in Ge.prototype))return!1;if(n===e)return!0;var A=Ao(e);return!!A&&n===A[0]}(we&&co(new we(new ArrayBuffer(1)))!=M||Ee&&co(new Ee)!=k||xe&&co(xe.resolve())!=x||ve&&co(new ve)!=y||ye&&co(new ye)!=_)&&(co=function(n){var t=EA(n),e=t==E?n.constructor:r,A=e?qo(e):"";if(A)switch(A){case ze:return M;case Me:return k;case Le:return x;case We:return y;case Se:return _}return t});var bo=Mn?Ji:gs;function ko(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||zn)}function wo(n){return n==n&&!ta(n)}function Eo(n,t){return function(e){return null!=e&&e[n]===t&&(t!==r||n in xn(e))}}function xo(n,t,e){return t=ge(t===r?n.length-1:t,0),function(){for(var r=arguments,o=-1,i=ge(r.length-t,0),a=A(i);++o<i;)a[o]=r[t+o];o=-1;for(var s=A(t+1);++o<t;)s[o]=r[o];return s[t]=e(a),It(n,this,s)}}function vo(n,t){return t.length<2?n:kA(n,tr(t,0,-1))}function yo(n,t){for(var e=n.length,A=Ie(t.length,e),o=yr(n);A--;){var i=t[A];n[A]=go(i,e)?o[i]:r}return n}function Do(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var Yo=Lo(JA),_o=qt||function(n,t){return it.setTimeout(n,t)},zo=Lo($A);function Mo(n,t,e){var A=t+"";return zo(n,function(n,t){var e=t.length;if(!e)return n;var A=e-1;return t[A]=(e>1?"& ":"")+t[A],t=t.join(e>2?", ":" "),n.replace(on,"{\n/* [wrapped with "+t+"] */\n")}(A,function(n,t){return ht(d,(function(e){var A="_."+e[0];t&e[1]&&!Et(n,A)&&n.push(A)})),n.sort()}(function(n){var t=n.match(an);return t?t[1].split(sn):[]}(A),e)))}function Lo(n){var t=0,e=0;return function(){var A=me(),o=16-(A-e);if(e=A,o>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(r,arguments)}}function Wo(n,t){var e=-1,A=n.length,o=A-1;for(t=t===r?A:t;++e<t;){var i=VA(e,o),a=n[i];n[i]=n[e],n[e]=a}return n.length=t,n}var So,Uo,jo=(So=Si((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(nn,(function(n,e,A,r){t.push(A?r.replace(Cn,"$1"):e||n)})),t}),(function(n){return 500===Uo.size&&Uo.clear(),n})),Uo=So.cache,So);function Fo(n){if("string"==typeof n||la(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function qo(n){if(null!=n){try{return Ln.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Xo(n){if(n instanceof Ge)return n.clone();var t=new Re(n.__wrapped__,n.__chain__);return t.__actions__=yr(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var To=PA((function(n,t){return Pi(n)?uA(n,BA(t,1,Pi,!0)):[]})),Ro=PA((function(n,t){var e=Ho(t);return Pi(e)&&(e=r),Pi(n)?uA(n,BA(t,1,Pi,!0),io(e,2)):[]})),Go=PA((function(n,t){var e=Ho(t);return Pi(e)&&(e=r),Pi(n)?uA(n,BA(t,1,Pi,!0),r,e):[]}));function Zo(n,t,e){var A=null==n?0:n.length;if(!A)return-1;var r=null==e?0:pa(e);return r<0&&(r=ge(A+r,0)),Lt(n,io(t,3),r)}function Qo(n,t,e){var A=null==n?0:n.length;if(!A)return-1;var o=A-1;return e!==r&&(o=pa(e),o=e<0?ge(A+o,0):Ie(o,A-1)),Lt(n,io(t,3),o,!0)}function Vo(n){return null!=n&&n.length?BA(n,1):[]}function Oo(n){return n&&n.length?n[0]:r}var Po=PA((function(n){var t=vt(n,pr);return t.length&&t[0]===n[0]?DA(t):[]})),No=PA((function(n){var t=Ho(n),e=vt(n,pr);return t===Ho(e)?t=r:e.pop(),e.length&&e[0]===n[0]?DA(e,io(t,2)):[]})),Ko=PA((function(n){var t=Ho(n),e=vt(n,pr);return(t="function"==typeof t?t:r)&&e.pop(),e.length&&e[0]===n[0]?DA(e,r,t):[]}));function Ho(n){var t=null==n?0:n.length;return t?n[t-1]:r}var Jo=PA($o);function $o(n,t){return n&&n.length&&t&&t.length?ZA(n,t):n}var ni=no((function(n,t){var e=null==n?0:n.length,A=oA(n,t);return QA(n,vt(t,(function(n){return go(n,e)?+n:n})).sort(Er)),A}));function ti(n){return null==n?n:ke.call(n)}var ei=PA((function(n){return sr(BA(n,1,Pi,!0))})),Ai=PA((function(n){var t=Ho(n);return Pi(t)&&(t=r),sr(BA(n,1,Pi,!0),io(t,2))})),ri=PA((function(n){var t=Ho(n);return t="function"==typeof t?t:r,sr(BA(n,1,Pi,!0),r,t)}));function oi(n){if(!n||!n.length)return[];var t=0;return n=wt(n,(function(n){if(Pi(n))return t=ge(n.length,t),!0})),Rt(t,(function(t){return vt(n,Ft(t))}))}function ii(n,t){if(!n||!n.length)return[];var e=oi(n);return null==t?e:vt(e,(function(n){return It(t,r,n)}))}var ai=PA((function(n,t){return Pi(n)?uA(n,t):[]})),si=PA((function(n){return fr(wt(n,Pi))})),li=PA((function(n){var t=Ho(n);return Pi(t)&&(t=r),fr(wt(n,Pi),io(t,2))})),ui=PA((function(n){var t=Ho(n);return t="function"==typeof t?t:r,fr(wt(n,Pi),r,t)})),Ci=PA(oi),ci=PA((function(n){var t=n.length,e=t>1?n[t-1]:r;return e="function"==typeof e?(n.pop(),e):r,ii(n,e)}));function fi(n){var t=qe(n);return t.__chain__=!0,t}function di(n,t){return t(n)}var pi=no((function(n){var t=n.length,e=t?n[0]:0,A=this.__wrapped__,o=function(t){return oA(t,n)};return!(t>1||this.__actions__.length)&&A instanceof Ge&&go(e)?((A=A.slice(e,+e+(t?1:0))).__actions__.push({func:di,args:[o],thisArg:r}),new Re(A,this.__chain__).thru((function(n){return t&&!n.length&&n.push(r),n}))):this.thru(o)})),Bi=Yr((function(n,t,e){Wn.call(n,e)?++n[e]:rA(n,e,1)})),gi=Ur(Zo),Ii=Ur(Qo);function mi(n,t){return(Qi(n)?ht:CA)(n,io(t,3))}function hi(n,t){return(Qi(n)?bt:cA)(n,io(t,3))}var bi=Yr((function(n,t,e){Wn.call(n,e)?n[e].push(t):rA(n,e,[t])})),ki=PA((function(n,t,e){var r=-1,o="function"==typeof t,i=Oi(n)?A(n.length):[];return CA(n,(function(n){i[++r]=o?It(t,n,e):YA(n,t,e)})),i})),wi=Yr((function(n,t,e){rA(n,e,t)}));function Ei(n,t){return(Qi(n)?vt:jA)(n,io(t,3))}var xi=Yr((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]})),vi=PA((function(n,t){if(null==n)return[];var e=t.length;return e>1&&Io(n,t[0],t[1])?t=[]:e>2&&Io(t[0],t[1],t[2])&&(t=[t[0]]),RA(n,BA(t,1),[])})),yi=zt||function(){return it.Date.now()};function Di(n,t,e){return t=e?r:t,t=n&&null==t?n.length:t,Nr(n,l,r,r,r,r,t)}function Yi(n,t){var e;if("function"!=typeof t)throw new Dn(o);return n=pa(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=r),e}}var _i=PA((function(n,t,e){var A=1;if(e.length){var r=ee(e,oo(_i));A|=s}return Nr(n,A,t,e,r)})),zi=PA((function(n,t,e){var A=3;if(e.length){var r=ee(e,oo(zi));A|=s}return Nr(t,A,n,e,r)}));function Mi(n,t,e){var A,i,a,s,l,u,C=0,c=!1,f=!1,d=!0;if("function"!=typeof n)throw new Dn(o);function p(t){var e=A,o=i;return A=i=r,C=t,s=n.apply(o,e)}function B(n){return C=n,l=_o(I,t),c?p(n):s}function g(n){var e=n-u;return u===r||e>=t||e<0||f&&n-C>=a}function I(){var n=yi();if(g(n))return m(n);l=_o(I,function(n){var e=t-(n-u);return f?Ie(e,a-(n-C)):e}(n))}function m(n){return l=r,d&&A?p(n):(A=i=r,s)}function h(){var n=yi(),e=g(n);if(A=arguments,i=this,u=n,e){if(l===r)return B(u);if(f)return hr(l),l=_o(I,t),p(u)}return l===r&&(l=_o(I,t)),s}return t=ga(t)||0,ta(e)&&(c=!!e.leading,a=(f="maxWait"in e)?ge(ga(e.maxWait)||0,t):a,d="trailing"in e?!!e.trailing:d),h.cancel=function(){l!==r&&hr(l),C=0,A=u=i=l=r},h.flush=function(){return l===r?s:m(yi())},h}var Li=PA((function(n,t){return lA(n,1,t)})),Wi=PA((function(n,t,e){return lA(n,ga(t)||0,e)}));function Si(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new Dn(o);var e=function(){var A=arguments,r=t?t.apply(this,A):A[0],o=e.cache;if(o.has(r))return o.get(r);var i=n.apply(this,A);return e.cache=o.set(r,i)||o,i};return e.cache=new(Si.Cache||Ve),e}function Ui(n){if("function"!=typeof n)throw new Dn(o);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}Si.Cache=Ve;var ji=Ir((function(n,t){var e=(t=1==t.length&&Qi(t[0])?vt(t[0],Zt(io())):vt(BA(t,1),Zt(io()))).length;return PA((function(A){for(var r=-1,o=Ie(A.length,e);++r<o;)A[r]=t[r].call(this,A[r]);return It(n,this,A)}))})),Fi=PA((function(n,t){var e=ee(t,oo(Fi));return Nr(n,s,r,t,e)})),qi=PA((function(n,t){var e=ee(t,oo(qi));return Nr(n,64,r,t,e)})),Xi=no((function(n,t){return Nr(n,256,r,r,r,t)}));function Ti(n,t){return n===t||n!=n&&t!=t}var Ri=Zr(xA),Gi=Zr((function(n,t){return n>=t})),Zi=_A(function(){return arguments}())?_A:function(n){return ea(n)&&Wn.call(n,"callee")&&!tt.call(n,"callee")},Qi=A.isArray,Vi=ct?Zt(ct):function(n){return ea(n)&&EA(n)==z};function Oi(n){return null!=n&&na(n.length)&&!Ji(n)}function Pi(n){return ea(n)&&Oi(n)}var Ni=fe||gs,Ki=ft?Zt(ft):function(n){return ea(n)&&EA(n)==I};function Hi(n){if(!ea(n))return!1;var t=EA(n);return t==m||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!oa(n)}function Ji(n){if(!ta(n))return!1;var t=EA(n);return t==h||t==b||"[object AsyncFunction]"==t||"[object Proxy]"==t}function $i(n){return"number"==typeof n&&n==pa(n)}function na(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=C}function ta(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function ea(n){return null!=n&&"object"==typeof n}var Aa=dt?Zt(dt):function(n){return ea(n)&&co(n)==k};function ra(n){return"number"==typeof n||ea(n)&&EA(n)==w}function oa(n){if(!ea(n)||EA(n)!=E)return!1;var t=On(n);if(null===t)return!0;var e=Wn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&Ln.call(e)==Fn}var ia=pt?Zt(pt):function(n){return ea(n)&&EA(n)==v},aa=Bt?Zt(Bt):function(n){return ea(n)&&co(n)==y};function sa(n){return"string"==typeof n||!Qi(n)&&ea(n)&&EA(n)==D}function la(n){return"symbol"==typeof n||ea(n)&&EA(n)==Y}var ua=gt?Zt(gt):function(n){return ea(n)&&na(n.length)&&!!$n[EA(n)]},Ca=Zr(UA),ca=Zr((function(n,t){return n<=t}));function fa(n){if(!n)return[];if(Oi(n))return sa(n)?ie(n):yr(n);if(at&&n[at])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[at]());var t=co(n);return(t==k?ne:t==y?Ae:Ta)(n)}function da(n){return n?(n=ga(n))===u||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function pa(n){var t=da(n),e=t%1;return t==t?e?t-e:t:0}function Ba(n){return n?iA(pa(n),0,f):0}function ga(n){if("number"==typeof n)return n;if(la(n))return c;if(ta(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=ta(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=Gt(n);var e=pn.test(n);return e||gn.test(n)?At(n.slice(2),e?2:8):dn.test(n)?c:+n}function Ia(n){return Dr(n,La(n))}function ma(n){return null==n?"":ar(n)}var ha=_r((function(n,t){if(ko(t)||Oi(t))Dr(t,Ma(t),n);else for(var e in t)Wn.call(t,e)&&nA(n,e,t[e])})),ba=_r((function(n,t){Dr(t,La(t),n)})),ka=_r((function(n,t,e,A){Dr(t,La(t),n,A)})),wa=_r((function(n,t,e,A){Dr(t,Ma(t),n,A)})),Ea=no(oA),xa=PA((function(n,t){n=xn(n);var e=-1,A=t.length,o=A>2?t[2]:r;for(o&&Io(t[0],t[1],o)&&(A=1);++e<A;)for(var i=t[e],a=La(i),s=-1,l=a.length;++s<l;){var u=a[s],C=n[u];(C===r||Ti(C,zn[u])&&!Wn.call(n,u))&&(n[u]=i[u])}return n})),va=PA((function(n){return n.push(r,Hr),It(Sa,r,n)}));function ya(n,t,e){var A=null==n?r:kA(n,t);return A===r?e:A}function Da(n,t){return null!=n&&fo(n,t,yA)}var Ya=qr((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=jn.call(t)),n[t]=e}),ts(rs)),_a=qr((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=jn.call(t)),Wn.call(n,t)?n[t].push(e):n[t]=[e]}),io),za=PA(YA);function Ma(n){return Oi(n)?Ne(n):SA(n)}function La(n){return Oi(n)?Ne(n,!0):function(n){if(!ta(n))return function(n){var t=[];if(null!=n)for(var e in xn(n))t.push(e);return t}(n);var t=ko(n),e=[];for(var A in n)("constructor"!=A||!t&&Wn.call(n,A))&&e.push(A);return e}(n)}var Wa=_r((function(n,t,e){XA(n,t,e)})),Sa=_r((function(n,t,e,A){XA(n,t,e,A)})),Ua=no((function(n,t){var e={};if(null==n)return e;var A=!1;t=vt(t,(function(t){return t=gr(t,n),A||(A=t.length>1),t})),Dr(n,eo(n),e),A&&(e=aA(e,7,Jr));for(var r=t.length;r--;)lr(e,t[r]);return e})),ja=no((function(n,t){return null==n?{}:function(n,t){return GA(n,t,(function(t,e){return Da(n,e)}))}(n,t)}));function Fa(n,t){if(null==n)return{};var e=vt(eo(n),(function(n){return[n]}));return t=io(t),GA(n,e,(function(n,e){return t(n,e[0])}))}var qa=Pr(Ma),Xa=Pr(La);function Ta(n){return null==n?[]:Qt(n,Ma(n))}var Ra=Wr((function(n,t,e){return t=t.toLowerCase(),n+(e?Ga(t):t)}));function Ga(n){return Ha(ma(n).toLowerCase())}function Za(n){return(n=ma(n))&&n.replace(mn,Kt).replace(Vn,"")}var Qa=Wr((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Va=Wr((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),Oa=Lr("toLowerCase"),Pa=Wr((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()})),Na=Wr((function(n,t,e){return n+(e?" ":"")+Ha(t)})),Ka=Wr((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Ha=Lr("toUpperCase");function Ja(n,t,e){return n=ma(n),(t=e?r:t)===r?function(n){return Kn.test(n)}(n)?function(n){return n.match(Pn)||[]}(n):function(n){return n.match(ln)||[]}(n):n.match(t)||[]}var $a=PA((function(n,t){try{return It(n,r,t)}catch(n){return Hi(n)?n:new kn(n)}})),ns=no((function(n,t){return ht(t,(function(t){t=Fo(t),rA(n,t,_i(n[t],n))})),n}));function ts(n){return function(){return n}}var es=jr(),As=jr(!0);function rs(n){return n}function os(n){return WA("function"==typeof n?n:aA(n,1))}var is=PA((function(n,t){return function(e){return YA(e,n,t)}})),as=PA((function(n,t){return function(e){return YA(n,e,t)}}));function ss(n,t,e){var A=Ma(t),r=bA(t,A);null!=e||ta(t)&&(r.length||!A.length)||(e=t,t=n,n=this,r=bA(t,Ma(t)));var o=!(ta(e)&&"chain"in e&&!e.chain),i=Ji(n);return ht(r,(function(e){var A=t[e];n[e]=A,i&&(n.prototype[e]=function(){var t=this.__chain__;if(o||t){var e=n(this.__wrapped__),r=e.__actions__=yr(this.__actions__);return r.push({func:A,args:arguments,thisArg:n}),e.__chain__=t,e}return A.apply(n,yt([this.value()],arguments))})})),n}function ls(){}var us=Tr(vt),Cs=Tr(kt),cs=Tr(_t);function fs(n){return mo(n)?Ft(Fo(n)):function(n){return function(t){return kA(t,n)}}(n)}var ds=Gr(),ps=Gr(!0);function Bs(){return[]}function gs(){return!1}var Is,ms=Xr((function(n,t){return n+t}),0),hs=Vr("ceil"),bs=Xr((function(n,t){return n/t}),1),ks=Vr("floor"),ws=Xr((function(n,t){return n*t}),1),Es=Vr("round"),xs=Xr((function(n,t){return n-t}),0);return qe.after=function(n,t){if("function"!=typeof t)throw new Dn(o);return n=pa(n),function(){if(--n<1)return t.apply(this,arguments)}},qe.ary=Di,qe.assign=ha,qe.assignIn=ba,qe.assignInWith=ka,qe.assignWith=wa,qe.at=Ea,qe.before=Yi,qe.bind=_i,qe.bindAll=ns,qe.bindKey=zi,qe.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Qi(n)?n:[n]},qe.chain=fi,qe.chunk=function(n,t,e){t=(e?Io(n,t,e):t===r)?1:ge(pa(t),0);var o=null==n?0:n.length;if(!o||t<1)return[];for(var i=0,a=0,s=A(ue(o/t));i<o;)s[a++]=tr(n,i,i+=t);return s},qe.compact=function(n){for(var t=-1,e=null==n?0:n.length,A=0,r=[];++t<e;){var o=n[t];o&&(r[A++]=o)}return r},qe.concat=function(){var n=arguments.length;if(!n)return[];for(var t=A(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return yt(Qi(e)?yr(e):[e],BA(t,1))},qe.cond=function(n){var t=null==n?0:n.length,e=io();return n=t?vt(n,(function(n){if("function"!=typeof n[1])throw new Dn(o);return[e(n[0]),n[1]]})):[],PA((function(e){for(var A=-1;++A<t;){var r=n[A];if(It(r[0],this,e))return It(r[1],this,e)}}))},qe.conforms=function(n){return function(n){var t=Ma(n);return function(e){return sA(e,n,t)}}(aA(n,1))},qe.constant=ts,qe.countBy=Bi,qe.create=function(n,t){var e=Xe(n);return null==t?e:AA(e,t)},qe.curry=function n(t,e,A){var o=Nr(t,8,r,r,r,r,r,e=A?r:e);return o.placeholder=n.placeholder,o},qe.curryRight=function n(t,e,A){var o=Nr(t,16,r,r,r,r,r,e=A?r:e);return o.placeholder=n.placeholder,o},qe.debounce=Mi,qe.defaults=xa,qe.defaultsDeep=va,qe.defer=Li,qe.delay=Wi,qe.difference=To,qe.differenceBy=Ro,qe.differenceWith=Go,qe.drop=function(n,t,e){var A=null==n?0:n.length;return A?tr(n,(t=e||t===r?1:pa(t))<0?0:t,A):[]},qe.dropRight=function(n,t,e){var A=null==n?0:n.length;return A?tr(n,0,(t=A-(t=e||t===r?1:pa(t)))<0?0:t):[]},qe.dropRightWhile=function(n,t){return n&&n.length?Cr(n,io(t,3),!0,!0):[]},qe.dropWhile=function(n,t){return n&&n.length?Cr(n,io(t,3),!0):[]},qe.fill=function(n,t,e,A){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Io(n,t,e)&&(e=0,A=o),function(n,t,e,A){var o=n.length;for((e=pa(e))<0&&(e=-e>o?0:o+e),(A=A===r||A>o?o:pa(A))<0&&(A+=o),A=e>A?0:Ba(A);e<A;)n[e++]=t;return n}(n,t,e,A)):[]},qe.filter=function(n,t){return(Qi(n)?wt:pA)(n,io(t,3))},qe.flatMap=function(n,t){return BA(Ei(n,t),1)},qe.flatMapDeep=function(n,t){return BA(Ei(n,t),u)},qe.flatMapDepth=function(n,t,e){return e=e===r?1:pa(e),BA(Ei(n,t),e)},qe.flatten=Vo,qe.flattenDeep=function(n){return null!=n&&n.length?BA(n,u):[]},qe.flattenDepth=function(n,t){return null!=n&&n.length?BA(n,t=t===r?1:pa(t)):[]},qe.flip=function(n){return Nr(n,512)},qe.flow=es,qe.flowRight=As,qe.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,A={};++t<e;){var r=n[t];A[r[0]]=r[1]}return A},qe.functions=function(n){return null==n?[]:bA(n,Ma(n))},qe.functionsIn=function(n){return null==n?[]:bA(n,La(n))},qe.groupBy=bi,qe.initial=function(n){return null!=n&&n.length?tr(n,0,-1):[]},qe.intersection=Po,qe.intersectionBy=No,qe.intersectionWith=Ko,qe.invert=Ya,qe.invertBy=_a,qe.invokeMap=ki,qe.iteratee=os,qe.keyBy=wi,qe.keys=Ma,qe.keysIn=La,qe.map=Ei,qe.mapKeys=function(n,t){var e={};return t=io(t,3),mA(n,(function(n,A,r){rA(e,t(n,A,r),n)})),e},qe.mapValues=function(n,t){var e={};return t=io(t,3),mA(n,(function(n,A,r){rA(e,A,t(n,A,r))})),e},qe.matches=function(n){return FA(aA(n,1))},qe.matchesProperty=function(n,t){return qA(n,aA(t,1))},qe.memoize=Si,qe.merge=Wa,qe.mergeWith=Sa,qe.method=is,qe.methodOf=as,qe.mixin=ss,qe.negate=Ui,qe.nthArg=function(n){return n=pa(n),PA((function(t){return TA(t,n)}))},qe.omit=Ua,qe.omitBy=function(n,t){return Fa(n,Ui(io(t)))},qe.once=function(n){return Yi(2,n)},qe.orderBy=function(n,t,e,A){return null==n?[]:(Qi(t)||(t=null==t?[]:[t]),Qi(e=A?r:e)||(e=null==e?[]:[e]),RA(n,t,e))},qe.over=us,qe.overArgs=ji,qe.overEvery=Cs,qe.overSome=cs,qe.partial=Fi,qe.partialRight=qi,qe.partition=xi,qe.pick=ja,qe.pickBy=Fa,qe.property=fs,qe.propertyOf=function(n){return function(t){return null==n?r:kA(n,t)}},qe.pull=Jo,qe.pullAll=$o,qe.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?ZA(n,t,io(e,2)):n},qe.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?ZA(n,t,r,e):n},qe.pullAt=ni,qe.range=ds,qe.rangeRight=ps,qe.rearg=Xi,qe.reject=function(n,t){return(Qi(n)?wt:pA)(n,Ui(io(t,3)))},qe.remove=function(n,t){var e=[];if(!n||!n.length)return e;var A=-1,r=[],o=n.length;for(t=io(t,3);++A<o;){var i=n[A];t(i,A,n)&&(e.push(i),r.push(A))}return QA(n,r),e},qe.rest=function(n,t){if("function"!=typeof n)throw new Dn(o);return PA(n,t=t===r?t:pa(t))},qe.reverse=ti,qe.sampleSize=function(n,t,e){return t=(e?Io(n,t,e):t===r)?1:pa(t),(Qi(n)?He:KA)(n,t)},qe.set=function(n,t,e){return null==n?n:HA(n,t,e)},qe.setWith=function(n,t,e,A){return A="function"==typeof A?A:r,null==n?n:HA(n,t,e,A)},qe.shuffle=function(n){return(Qi(n)?Je:nr)(n)},qe.slice=function(n,t,e){var A=null==n?0:n.length;return A?(e&&"number"!=typeof e&&Io(n,t,e)?(t=0,e=A):(t=null==t?0:pa(t),e=e===r?A:pa(e)),tr(n,t,e)):[]},qe.sortBy=vi,qe.sortedUniq=function(n){return n&&n.length?or(n):[]},qe.sortedUniqBy=function(n,t){return n&&n.length?or(n,io(t,2)):[]},qe.split=function(n,t,e){return e&&"number"!=typeof e&&Io(n,t,e)&&(t=e=r),(e=e===r?f:e>>>0)?(n=ma(n))&&("string"==typeof t||null!=t&&!ia(t))&&!(t=ar(t))&&$t(n)?mr(ie(n),0,e):n.split(t,e):[]},qe.spread=function(n,t){if("function"!=typeof n)throw new Dn(o);return t=null==t?0:ge(pa(t),0),PA((function(e){var A=e[t],r=mr(e,0,t);return A&&yt(r,A),It(n,this,r)}))},qe.tail=function(n){var t=null==n?0:n.length;return t?tr(n,1,t):[]},qe.take=function(n,t,e){return n&&n.length?tr(n,0,(t=e||t===r?1:pa(t))<0?0:t):[]},qe.takeRight=function(n,t,e){var A=null==n?0:n.length;return A?tr(n,(t=A-(t=e||t===r?1:pa(t)))<0?0:t,A):[]},qe.takeRightWhile=function(n,t){return n&&n.length?Cr(n,io(t,3),!1,!0):[]},qe.takeWhile=function(n,t){return n&&n.length?Cr(n,io(t,3)):[]},qe.tap=function(n,t){return t(n),n},qe.throttle=function(n,t,e){var A=!0,r=!0;if("function"!=typeof n)throw new Dn(o);return ta(e)&&(A="leading"in e?!!e.leading:A,r="trailing"in e?!!e.trailing:r),Mi(n,t,{leading:A,maxWait:t,trailing:r})},qe.thru=di,qe.toArray=fa,qe.toPairs=qa,qe.toPairsIn=Xa,qe.toPath=function(n){return Qi(n)?vt(n,Fo):la(n)?[n]:yr(jo(ma(n)))},qe.toPlainObject=Ia,qe.transform=function(n,t,e){var A=Qi(n),r=A||Ni(n)||ua(n);if(t=io(t,4),null==e){var o=n&&n.constructor;e=r?A?new o:[]:ta(n)&&Ji(o)?Xe(On(n)):{}}return(r?ht:mA)(n,(function(n,A,r){return t(e,n,A,r)})),e},qe.unary=function(n){return Di(n,1)},qe.union=ei,qe.unionBy=Ai,qe.unionWith=ri,qe.uniq=function(n){return n&&n.length?sr(n):[]},qe.uniqBy=function(n,t){return n&&n.length?sr(n,io(t,2)):[]},qe.uniqWith=function(n,t){return t="function"==typeof t?t:r,n&&n.length?sr(n,r,t):[]},qe.unset=function(n,t){return null==n||lr(n,t)},qe.unzip=oi,qe.unzipWith=ii,qe.update=function(n,t,e){return null==n?n:ur(n,t,Br(e))},qe.updateWith=function(n,t,e,A){return A="function"==typeof A?A:r,null==n?n:ur(n,t,Br(e),A)},qe.values=Ta,qe.valuesIn=function(n){return null==n?[]:Qt(n,La(n))},qe.without=ai,qe.words=Ja,qe.wrap=function(n,t){return Fi(Br(t),n)},qe.xor=si,qe.xorBy=li,qe.xorWith=ui,qe.zip=Ci,qe.zipObject=function(n,t){return dr(n||[],t||[],nA)},qe.zipObjectDeep=function(n,t){return dr(n||[],t||[],HA)},qe.zipWith=ci,qe.entries=qa,qe.entriesIn=Xa,qe.extend=ba,qe.extendWith=ka,ss(qe,qe),qe.add=ms,qe.attempt=$a,qe.camelCase=Ra,qe.capitalize=Ga,qe.ceil=hs,qe.clamp=function(n,t,e){return e===r&&(e=t,t=r),e!==r&&(e=(e=ga(e))==e?e:0),t!==r&&(t=(t=ga(t))==t?t:0),iA(ga(n),t,e)},qe.clone=function(n){return aA(n,4)},qe.cloneDeep=function(n){return aA(n,5)},qe.cloneDeepWith=function(n,t){return aA(n,5,t="function"==typeof t?t:r)},qe.cloneWith=function(n,t){return aA(n,4,t="function"==typeof t?t:r)},qe.conformsTo=function(n,t){return null==t||sA(n,t,Ma(t))},qe.deburr=Za,qe.defaultTo=function(n,t){return null==n||n!=n?t:n},qe.divide=bs,qe.endsWith=function(n,t,e){n=ma(n),t=ar(t);var A=n.length,o=e=e===r?A:iA(pa(e),0,A);return(e-=t.length)>=0&&n.slice(e,o)==t},qe.eq=Ti,qe.escape=function(n){return(n=ma(n))&&P.test(n)?n.replace(V,Ht):n},qe.escapeRegExp=function(n){return(n=ma(n))&&en.test(n)?n.replace(tn,"\\$&"):n},qe.every=function(n,t,e){var A=Qi(n)?kt:fA;return e&&Io(n,t,e)&&(t=r),A(n,io(t,3))},qe.find=gi,qe.findIndex=Zo,qe.findKey=function(n,t){return Mt(n,io(t,3),mA)},qe.findLast=Ii,qe.findLastIndex=Qo,qe.findLastKey=function(n,t){return Mt(n,io(t,3),hA)},qe.floor=ks,qe.forEach=mi,qe.forEachRight=hi,qe.forIn=function(n,t){return null==n?n:gA(n,io(t,3),La)},qe.forInRight=function(n,t){return null==n?n:IA(n,io(t,3),La)},qe.forOwn=function(n,t){return n&&mA(n,io(t,3))},qe.forOwnRight=function(n,t){return n&&hA(n,io(t,3))},qe.get=ya,qe.gt=Ri,qe.gte=Gi,qe.has=function(n,t){return null!=n&&fo(n,t,vA)},qe.hasIn=Da,qe.head=Oo,qe.identity=rs,qe.includes=function(n,t,e,A){n=Oi(n)?n:Ta(n),e=e&&!A?pa(e):0;var r=n.length;return e<0&&(e=ge(r+e,0)),sa(n)?e<=r&&n.indexOf(t,e)>-1:!!r&&Wt(n,t,e)>-1},qe.indexOf=function(n,t,e){var A=null==n?0:n.length;if(!A)return-1;var r=null==e?0:pa(e);return r<0&&(r=ge(A+r,0)),Wt(n,t,r)},qe.inRange=function(n,t,e){return t=da(t),e===r?(e=t,t=0):e=da(e),function(n,t,e){return n>=Ie(t,e)&&n<ge(t,e)}(n=ga(n),t,e)},qe.invoke=za,qe.isArguments=Zi,qe.isArray=Qi,qe.isArrayBuffer=Vi,qe.isArrayLike=Oi,qe.isArrayLikeObject=Pi,qe.isBoolean=function(n){return!0===n||!1===n||ea(n)&&EA(n)==g},qe.isBuffer=Ni,qe.isDate=Ki,qe.isElement=function(n){return ea(n)&&1===n.nodeType&&!oa(n)},qe.isEmpty=function(n){if(null==n)return!0;if(Oi(n)&&(Qi(n)||"string"==typeof n||"function"==typeof n.splice||Ni(n)||ua(n)||Zi(n)))return!n.length;var t=co(n);if(t==k||t==y)return!n.size;if(ko(n))return!SA(n).length;for(var e in n)if(Wn.call(n,e))return!1;return!0},qe.isEqual=function(n,t){return zA(n,t)},qe.isEqualWith=function(n,t,e){var A=(e="function"==typeof e?e:r)?e(n,t):r;return A===r?zA(n,t,r,e):!!A},qe.isError=Hi,qe.isFinite=function(n){return"number"==typeof n&&de(n)},qe.isFunction=Ji,qe.isInteger=$i,qe.isLength=na,qe.isMap=Aa,qe.isMatch=function(n,t){return n===t||MA(n,t,so(t))},qe.isMatchWith=function(n,t,e){return e="function"==typeof e?e:r,MA(n,t,so(t),e)},qe.isNaN=function(n){return ra(n)&&n!=+n},qe.isNative=function(n){if(bo(n))throw new kn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return LA(n)},qe.isNil=function(n){return null==n},qe.isNull=function(n){return null===n},qe.isNumber=ra,qe.isObject=ta,qe.isObjectLike=ea,qe.isPlainObject=oa,qe.isRegExp=ia,qe.isSafeInteger=function(n){return $i(n)&&n>=-9007199254740991&&n<=C},qe.isSet=aa,qe.isString=sa,qe.isSymbol=la,qe.isTypedArray=ua,qe.isUndefined=function(n){return n===r},qe.isWeakMap=function(n){return ea(n)&&co(n)==_},qe.isWeakSet=function(n){return ea(n)&&"[object WeakSet]"==EA(n)},qe.join=function(n,t){return null==n?"":pe.call(n,t)},qe.kebabCase=Qa,qe.last=Ho,qe.lastIndexOf=function(n,t,e){var A=null==n?0:n.length;if(!A)return-1;var o=A;return e!==r&&(o=(o=pa(e))<0?ge(A+o,0):Ie(o,A-1)),t==t?function(n,t,e){for(var A=e+1;A--;)if(n[A]===t)return A;return A}(n,t,o):Lt(n,Ut,o,!0)},qe.lowerCase=Va,qe.lowerFirst=Oa,qe.lt=Ca,qe.lte=ca,qe.max=function(n){return n&&n.length?dA(n,rs,xA):r},qe.maxBy=function(n,t){return n&&n.length?dA(n,io(t,2),xA):r},qe.mean=function(n){return jt(n,rs)},qe.meanBy=function(n,t){return jt(n,io(t,2))},qe.min=function(n){return n&&n.length?dA(n,rs,UA):r},qe.minBy=function(n,t){return n&&n.length?dA(n,io(t,2),UA):r},qe.stubArray=Bs,qe.stubFalse=gs,qe.stubObject=function(){return{}},qe.stubString=function(){return""},qe.stubTrue=function(){return!0},qe.multiply=ws,qe.nth=function(n,t){return n&&n.length?TA(n,pa(t)):r},qe.noConflict=function(){return it._===this&&(it._=qn),this},qe.noop=ls,qe.now=yi,qe.pad=function(n,t,e){n=ma(n);var A=(t=pa(t))?oe(n):0;if(!t||A>=t)return n;var r=(t-A)/2;return Rr(Ce(r),e)+n+Rr(ue(r),e)},qe.padEnd=function(n,t,e){n=ma(n);var A=(t=pa(t))?oe(n):0;return t&&A<t?n+Rr(t-A,e):n},qe.padStart=function(n,t,e){n=ma(n);var A=(t=pa(t))?oe(n):0;return t&&A<t?Rr(t-A,e)+n:n},qe.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),he(ma(n).replace(An,""),t||0)},qe.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Io(n,t,e)&&(t=e=r),e===r&&("boolean"==typeof t?(e=t,t=r):"boolean"==typeof n&&(e=n,n=r)),n===r&&t===r?(n=0,t=1):(n=da(n),t===r?(t=n,n=0):t=da(t)),n>t){var A=n;n=t,t=A}if(e||n%1||t%1){var o=be();return Ie(n+o*(t-n+et("1e-"+((o+"").length-1))),t)}return VA(n,t)},qe.reduce=function(n,t,e){var A=Qi(n)?Dt:Xt,r=arguments.length<3;return A(n,io(t,4),e,r,CA)},qe.reduceRight=function(n,t,e){var A=Qi(n)?Yt:Xt,r=arguments.length<3;return A(n,io(t,4),e,r,cA)},qe.repeat=function(n,t,e){return t=(e?Io(n,t,e):t===r)?1:pa(t),OA(ma(n),t)},qe.replace=function(){var n=arguments,t=ma(n[0]);return n.length<3?t:t.replace(n[1],n[2])},qe.result=function(n,t,e){var A=-1,o=(t=gr(t,n)).length;for(o||(o=1,n=r);++A<o;){var i=null==n?r:n[Fo(t[A])];i===r&&(A=o,i=e),n=Ji(i)?i.call(n):i}return n},qe.round=Es,qe.runInContext=n,qe.sample=function(n){return(Qi(n)?Ke:NA)(n)},qe.size=function(n){if(null==n)return 0;if(Oi(n))return sa(n)?oe(n):n.length;var t=co(n);return t==k||t==y?n.size:SA(n).length},qe.snakeCase=Pa,qe.some=function(n,t,e){var A=Qi(n)?_t:er;return e&&Io(n,t,e)&&(t=r),A(n,io(t,3))},qe.sortedIndex=function(n,t){return Ar(n,t)},qe.sortedIndexBy=function(n,t,e){return rr(n,t,io(e,2))},qe.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var A=Ar(n,t);if(A<e&&Ti(n[A],t))return A}return-1},qe.sortedLastIndex=function(n,t){return Ar(n,t,!0)},qe.sortedLastIndexBy=function(n,t,e){return rr(n,t,io(e,2),!0)},qe.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=Ar(n,t,!0)-1;if(Ti(n[e],t))return e}return-1},qe.startCase=Na,qe.startsWith=function(n,t,e){return n=ma(n),e=null==e?0:iA(pa(e),0,n.length),t=ar(t),n.slice(e,e+t.length)==t},qe.subtract=xs,qe.sum=function(n){return n&&n.length?Tt(n,rs):0},qe.sumBy=function(n,t){return n&&n.length?Tt(n,io(t,2)):0},qe.template=function(n,t,e){var A=qe.templateSettings;e&&Io(n,t,e)&&(t=r),n=ma(n),t=ka({},t,A,Kr);var o,i,a=ka({},t.imports,A.imports,Kr),s=Ma(a),l=Qt(a,s),u=0,C=t.interpolate||hn,c="__p += '",f=vn((t.escape||hn).source+"|"+C.source+"|"+(C===H?cn:hn).source+"|"+(t.evaluate||hn).source+"|$","g"),d="//# sourceURL="+(Wn.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Jn+"]")+"\n";n.replace(f,(function(t,e,A,r,a,s){return A||(A=r),c+=n.slice(u,s).replace(bn,Jt),e&&(o=!0,c+="' +\n__e("+e+") +\n'"),a&&(i=!0,c+="';\n"+a+";\n__p += '"),A&&(c+="' +\n((__t = ("+A+")) == null ? '' : __t) +\n'"),u=s+t.length,t})),c+="';\n";var p=Wn.call(t,"variable")&&t.variable;if(p){if(un.test(p))throw new kn("Invalid `variable` option passed into `_.template`")}else c="with (obj) {\n"+c+"\n}\n";c=(i?c.replace(R,""):c).replace(G,"$1").replace(Z,"$1;"),c="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+c+"return __p\n}";var B=$a((function(){return wn(s,d+"return "+c).apply(r,l)}));if(B.source=c,Hi(B))throw B;return B},qe.times=function(n,t){if((n=pa(n))<1||n>C)return[];var e=f,A=Ie(n,f);t=io(t),n-=f;for(var r=Rt(A,t);++e<n;)t(e);return r},qe.toFinite=da,qe.toInteger=pa,qe.toLength=Ba,qe.toLower=function(n){return ma(n).toLowerCase()},qe.toNumber=ga,qe.toSafeInteger=function(n){return n?iA(pa(n),-9007199254740991,C):0===n?n:0},qe.toString=ma,qe.toUpper=function(n){return ma(n).toUpperCase()},qe.trim=function(n,t,e){if((n=ma(n))&&(e||t===r))return Gt(n);if(!n||!(t=ar(t)))return n;var A=ie(n),o=ie(t);return mr(A,Ot(A,o),Pt(A,o)+1).join("")},qe.trimEnd=function(n,t,e){if((n=ma(n))&&(e||t===r))return n.slice(0,ae(n)+1);if(!n||!(t=ar(t)))return n;var A=ie(n);return mr(A,0,Pt(A,ie(t))+1).join("")},qe.trimStart=function(n,t,e){if((n=ma(n))&&(e||t===r))return n.replace(An,"");if(!n||!(t=ar(t)))return n;var A=ie(n);return mr(A,Ot(A,ie(t))).join("")},qe.truncate=function(n,t){var e=30,A="...";if(ta(t)){var o="separator"in t?t.separator:o;e="length"in t?pa(t.length):e,A="omission"in t?ar(t.omission):A}var i=(n=ma(n)).length;if($t(n)){var a=ie(n);i=a.length}if(e>=i)return n;var s=e-oe(A);if(s<1)return A;var l=a?mr(a,0,s).join(""):n.slice(0,s);if(o===r)return l+A;if(a&&(s+=l.length-s),ia(o)){if(n.slice(s).search(o)){var u,C=l;for(o.global||(o=vn(o.source,ma(fn.exec(o))+"g")),o.lastIndex=0;u=o.exec(C);)var c=u.index;l=l.slice(0,c===r?s:c)}}else if(n.indexOf(ar(o),s)!=s){var f=l.lastIndexOf(o);f>-1&&(l=l.slice(0,f))}return l+A},qe.unescape=function(n){return(n=ma(n))&&O.test(n)?n.replace(Q,se):n},qe.uniqueId=function(n){var t=++Sn;return ma(n)+t},qe.upperCase=Ka,qe.upperFirst=Ha,qe.each=mi,qe.eachRight=hi,qe.first=Oo,ss(qe,(Is={},mA(qe,(function(n,t){Wn.call(qe.prototype,t)||(Is[t]=n)})),Is),{chain:!1}),qe.VERSION="4.17.21",ht(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){qe[n].placeholder=qe})),ht(["drop","take"],(function(n,t){Ge.prototype[n]=function(e){e=e===r?1:ge(pa(e),0);var A=this.__filtered__&&!t?new Ge(this):this.clone();return A.__filtered__?A.__takeCount__=Ie(e,A.__takeCount__):A.__views__.push({size:Ie(e,f),type:n+(A.__dir__<0?"Right":"")}),A},Ge.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),ht(["filter","map","takeWhile"],(function(n,t){var e=t+1,A=1==e||3==e;Ge.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:io(n,3),type:e}),t.__filtered__=t.__filtered__||A,t}})),ht(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ge.prototype[n]=function(){return this[e](1).value()[0]}})),ht(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ge.prototype[n]=function(){return this.__filtered__?new Ge(this):this[e](1)}})),Ge.prototype.compact=function(){return this.filter(rs)},Ge.prototype.find=function(n){return this.filter(n).head()},Ge.prototype.findLast=function(n){return this.reverse().find(n)},Ge.prototype.invokeMap=PA((function(n,t){return"function"==typeof n?new Ge(this):this.map((function(e){return YA(e,n,t)}))})),Ge.prototype.reject=function(n){return this.filter(Ui(io(n)))},Ge.prototype.slice=function(n,t){n=pa(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ge(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==r&&(e=(t=pa(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ge.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ge.prototype.toArray=function(){return this.take(f)},mA(Ge.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),A=/^(?:head|last)$/.test(t),o=qe[A?"take"+("last"==t?"Right":""):t],i=A||/^find/.test(t);o&&(qe.prototype[t]=function(){var t=this.__wrapped__,a=A?[1]:arguments,s=t instanceof Ge,l=a[0],u=s||Qi(t),C=function(n){var t=o.apply(qe,yt([n],a));return A&&c?t[0]:t};u&&e&&"function"==typeof l&&1!=l.length&&(s=u=!1);var c=this.__chain__,f=!!this.__actions__.length,d=i&&!c,p=s&&!f;if(!i&&u){t=p?t:new Ge(this);var B=n.apply(t,a);return B.__actions__.push({func:di,args:[C],thisArg:r}),new Re(B,c)}return d&&p?n.apply(this,a):(B=this.thru(C),d?A?B.value()[0]:B.value():B)})})),ht(["pop","push","shift","sort","splice","unshift"],(function(n){var t=Yn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",A=/^(?:pop|shift)$/.test(n);qe.prototype[n]=function(){var n=arguments;if(A&&!this.__chain__){var r=this.value();return t.apply(Qi(r)?r:[],n)}return this[e]((function(e){return t.apply(Qi(e)?e:[],n)}))}})),mA(Ge.prototype,(function(n,t){var e=qe[t];if(e){var A=e.name+"";Wn.call(_e,A)||(_e[A]=[]),_e[A].push({name:t,func:e})}})),_e[Fr(r,2).name]=[{name:"wrapper",func:r}],Ge.prototype.clone=function(){var n=new Ge(this.__wrapped__);return n.__actions__=yr(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=yr(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=yr(this.__views__),n},Ge.prototype.reverse=function(){if(this.__filtered__){var n=new Ge(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ge.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Qi(n),A=t<0,r=e?n.length:0,o=function(n,t,e){for(var A=-1,r=e.length;++A<r;){var o=e[A],i=o.size;switch(o.type){case"drop":n+=i;break;case"dropRight":t-=i;break;case"take":t=Ie(t,n+i);break;case"takeRight":n=ge(n,t-i)}}return{start:n,end:t}}(0,r,this.__views__),i=o.start,a=o.end,s=a-i,l=A?a:i-1,u=this.__iteratees__,C=u.length,c=0,f=Ie(s,this.__takeCount__);if(!e||!A&&r==s&&f==s)return cr(n,this.__actions__);var d=[];n:for(;s--&&c<f;){for(var p=-1,B=n[l+=t];++p<C;){var g=u[p],I=g.iteratee,m=g.type,h=I(B);if(2==m)B=h;else if(!h){if(1==m)continue n;break n}}d[c++]=B}return d},qe.prototype.at=pi,qe.prototype.chain=function(){return fi(this)},qe.prototype.commit=function(){return new Re(this.value(),this.__chain__)},qe.prototype.next=function(){this.__values__===r&&(this.__values__=fa(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?r:this.__values__[this.__index__++]}},qe.prototype.plant=function(n){for(var t,e=this;e instanceof Te;){var A=Xo(e);A.__index__=0,A.__values__=r,t?o.__wrapped__=A:t=A;var o=A;e=e.__wrapped__}return o.__wrapped__=n,t},qe.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ge){var t=n;return this.__actions__.length&&(t=new Ge(this)),(t=t.reverse()).__actions__.push({func:di,args:[ti],thisArg:r}),new Re(t,this.__chain__)}return this.thru(ti)},qe.prototype.toJSON=qe.prototype.valueOf=qe.prototype.value=function(){return cr(this.__wrapped__,this.__actions__)},qe.prototype.first=qe.prototype.head,at&&(qe.prototype[at]=function(){return this}),qe}();it._=le,(A=function(){return le}.call(t,e,t,n))===r||(n.exports=A)}.call(this)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,A=0;A<t.length;A++)if(t[A].identifier===n){e=A;break}return e}function A(n,A){for(var o={},i=[],a=0;a<n.length;a++){var s=n[a],l=A.base?s[0]+A.base:s[0],u=o[l]||0,C="".concat(l," ").concat(u);o[l]=u+1;var c=e(C),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==c)t[c].references++,t[c].updater(f);else{var d=r(f,A);A.byIndex=a,t.splice(a,0,{identifier:C,updater:d,references:1})}i.push(C)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var o=A(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var a=e(o[i]);t[a].references--}for(var s=A(n,r),l=0;l<o.length;l++){var u=e(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=s}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var A=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var A="";e.supports&&(A+="@supports (".concat(e.supports,") {")),e.media&&(A+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(A+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),A+=e.css,r&&(A+="}"),e.media&&(A+="}"),e.supports&&(A+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(A+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(A,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},922:(n,t,e)=>{"use strict";n.exports=e.p+"907a8096deb05487a7c6.jpg"},530:(n,t,e)=>{"use strict";n.exports=e.p+"f4a058eb31f4e5ce8926.jpg"},428:(n,t,e)=>{"use strict";n.exports=e.p+"09674065e4086a02e772.jpg"},426:(n,t,e)=>{"use strict";n.exports=e.p+"56f992cff30094087fc6.jpg"},798:(n,t,e)=>{"use strict";n.exports=e.p+"1ac8be45ce7e4b32464c.jpg"},914:(n,t,e)=>{"use strict";n.exports=e.p+"6fb9e8c7d063dddf7c8a.png"},803:(n,t,e)=>{"use strict";n.exports=e.p+"ebd041d1d578eca24a93.jpg"},222:(n,t,e)=>{"use strict";n.exports=e.p+"cc3dd10e2541239895aa.jpg"},198:(n,t,e)=>{"use strict";n.exports=e.p+"133f730789abd19f2a8c.png"},535:(n,t,e)=>{"use strict";n.exports=e.p+"e7887ca4d9101d494023.jpg"},660:(n,t,e)=>{"use strict";n.exports=e.p+"72a422aa846b5ebef6d6.png"},808:(n,t,e)=>{"use strict";n.exports=e.p+"2621c7f06083bee1d86f.png"},951:(n,t,e)=>{"use strict";n.exports=e.p+"6fe94c359b4f8ce4e65a.png"},888:(n,t,e)=>{"use strict";n.exports=e.p+"a138e804d103710c150f.png"},311:(n,t,e)=>{"use strict";n.exports=e.p+"fbb2aee2e3354f4adf93.jpg"},206:(n,t,e)=>{"use strict";n.exports=e.p+"b7488c564b8f95ee32bd.png"}},t={};function e(A){var r=t[A];if(void 0!==r)return r.exports;var o=t[A]={id:A,loaded:!1,exports:{}};return n[A].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var A in t)e.o(t,A)&&!e.o(n,A)&&Object.defineProperty(n,A,{enumerable:!0,get:t[A]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var A=t.getElementsByTagName("script");A.length&&(n=A[A.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),(()=>{"use strict";e(486);var n=e(379),t=e.n(n),A=e(795),r=e.n(A),o=e(569),i=e.n(o),a=e(565),s=e.n(a),l=e(216),u=e.n(l),C=e(589),c=e.n(C),f=e(402),d={};function p(n,t,e=null,A=null){const r=document.createElement(`${n}`);return r.classList.add(`${t[0]}`),t.length>1&&r.classList.add(`${t[1]}`),r.textContent=e,r}d.styleTagTransform=c(),d.setAttributes=s(),d.insert=i().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=u(),t()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;const B=(n,t,e="imagesToMatch")=>{let A=[];for(let r=0;r<n;r++){const n=new Image;n.src=t[r].img,n.setAttribute("id",`${t[r].id}`),n.classList.add(`${e}`),A.push(n)}return A};var g=e(206),I=e(922),m=e(530),h=e(428),b=e(426),k=e(798),w=e(914),E=e(803),x=e(222),v=e(198),y=e(535),D=e(660),Y=e(808),_=e(951),z=e(888),M=e(311);let L,W,S,U;L=[{img:I,id:"awokado"},{img:m,id:"jabłko"},{img:h,id:"pomarancza"},{img:b,id:"truskawka"}];let j=[...L];L=L.concat(j),L=B(8,L),W=[{img:k,id:"dinozaur2"},{img:w,id:"fura"},{img:E,id:"mis"},{img:x,id:"morze"},{img:v,id:"motyl"}];let F=[...W];W=W.concat(F),W=B(10,W),S=[{img:y,id:"cegla"},{img:D,id:"glodowka"},{img:Y,id:"keto5"},{img:_,id:"ketoGofry"},{img:z,id:"reklama2"},{img:M,id:"reklama3"}],S=S.concat(S),S=B(12,S),U=[{img:"https://upload.wikimedia.org/wikipedia/en/2/27/Bliss_%28Windows_XP%29.png",id:"windie"},{img:"https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/Sunset_2007-1.jpg/254px-Sunset_2007-1.jpg",id:"zachod-slonca"},{img:"https://bi.im-g.pl/im/03/da/17/z25010179ICR,Kiedy-kupujemy-pomidory--wybierajmy-sztuki-dojrzal.jpg",id:"pomidor"},{img:"https://ocdn.eu/pulscms-transforms/1/ZWCk9kpTURBXy84NjgzYTlmMjllOTdiOTc3NzE5OTNlMmE4NzA3YjA3Yy5qcGeTlQMAFc0D6M0CMpMJpjg0OWIxYgaTBc0EsM0CdoGhMAE/morze-baltyckie.jpg",id:"morze"},{img:"https://bi.im-g.pl/im/dc/3b/19/z26459868AMP,Niebieski-Ksiezyc---co-oznacza-niebieski-Ksiezyc-.jpg",id:"ksiezyc"},{img:"https://ocdn.eu/images/pulscms/NjM7MDA_/0dc7eefa75e3f2692394d39b5d3834ef.jpg",id:"ksiezyc-dwa"},{img:"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Gogophercolor.png/1200px-Gogophercolor.png",id:"logo-google-programming"}],U=U=B(U.length,U,"exampleImages");const q=n=>{let t=[];for(;t.length<n;){let e=parseInt(Math.random()*n);!1===t.includes(e)&&t.push(e)}return t};function X(n,t,e,A){const r=p("div",["wrapperInput"]),o=p("br",["br"]),i=document.createElement(`${n}`);i.setAttribute("type",`${t}`),i.setAttribute("id",`${e}`),i.setAttribute("value","");const a=document.createElement("label");return a.textContent=A,a.htmlFor=`${e}`,r.appendChild(a),r.appendChild(o),r.appendChild(i),r}function T(n,t){n.style.border="3px solid yellow",n.value="",n.placeholder=`${t}`,n.style.backgroundColor="red",setTimeout((()=>{n.style.border="",n.value="",n.placeholder="",n.style.backgroundColor=""}),1e3)}function R(n){n.forEach((n=>{n.style.transform="none",n.style.border="none",n.style.borderRadius="0%"}))}console.log(S);const G=[{quantity:8,nameLvl:"firstLevel",imgLvl:L,mixImg:q(8)},{quantity:10,nameLvl:"secondLevel",imgLvl:W,mixImg:q(10)},{quantity:12,nameLvl:"thirdLevel",imgLvl:S,mixImg:q(12)}];X(),document.body.appendChild(function(){const n=document.createElement("div"),t=p("button",["startGame"],"graj"),e=p("div",["statement"]);e.innerHTML='<h1 class="h1Statement">Kreatywne ćwiczenia na pamięć</h1><br/>\n<p class="prefaceStatement">Trudności z koncentracją i zapamiętywaniem dużej ilości informacji to problem dotyczący\n zarówno dzieci, jak i osób dorosłych. Przyczyny tej dolegliwości mogą być różne, począwszy od stresu,\n  po choroby neurologiczne, jednak często problemy z nauką i zapamiętywaniem wynikają z nieznajomości\n   skutecznych metod uczenia oraz brakiem codziennych ćwiczeń, które angażują nasz mózg i\n    pozwalają utrzymać go w formie. Najskuteczniejsza nauka to taka, która angażuje obydwie\n     półkule mózgu, takie metody nauczania staramy się przekazać naszym uczniom, aby wzmocnić\n      ich koncentrację i funkcje poznawcze. Według badań półkule mózgu są odpowiedzialne za</p>\n      <div class="olPak">\n<div class="firstOl">\n      <ul>\n<h3>Prawa Półkula</h3>\n<li class="li">zdolności artystyczne</li>\n<li class="li">myślenie abstrakcyjne</li>\n<li class="li">kreatywność</li>\n<li class="li">wyobraźnia</li>\n<li class="li">zdolności muzyczne</li>\n </ul>\n </div>\n <div class="firstOl">\n <ul>\n <h3>Lewa Półkula</h3>\n <li class="li">mówienie i rozumienie słów</li>\n <li class="li">logiczne myślenie</li>\n <li class="li">zdolności analityczne</li>\n <li class="li">obliczenia</li>\n <li class="li">rozpoznawanie za pomocą dotyku</li>\n </ul>\n </div>\n </div>\n <em class="emStatement">Omawiane metody zapamiętywania, czyli mnemotechniki to sposoby, które starają się\n  angażować obydwie półkule, a co za tym idzie możliwie jak najwięcej zmysłów. Efektywność \n  nauki za pomocą tego typu metod jest znacznie wyższa, ale i ciekawsza niż monotonne czytanie\n   i próby nauczenia się czegoś bez zrozumienia. Wiedzieli już o tym uczeni sprzed tysięcy lat,\n    którzy z powodzeniem stosowali tego rodzaju techniki podczas zapamiętywania swoich przemówień.\n     Znacznie później, bo dopiero w XX wieku potwierdzono ich skuteczność w nauce.\n      Techniki mnemoniczne można wykorzystać w celu zapamiętania:</em>\n      <div class="divUl">\n      <li>listy zakupów</li>\n      <li>słówek w języku obcym</li>\n      <li>ciągów liczb – numerów, haseł</li>\n      <li>najważniejszych punktów swojej prezentacji lub wykładu</li>\n      <li>nazwisk</li>\n      <li>dat i wydarzeń</li>\n      </ul>\n      </div>\n      <ul>\n      <h5 class="h5">W wieku szkolnym pamięć jest ćwiczona każdego dnia, w późniejszym życiu zwykle\n       bywa mniej okazji do przyswajania nowych informacji, więc sprawność umysłowa może\n        ulec osłabieniu. Techniki mnemoniczne mają zastosowanie zarówno w nauce dzieci,\n         jak i dorosłych, a regularne ich stosowanie pozwala poprawić koncentrację.</h5>\n      ';let A=!1;return t.addEventListener("click",(n=>{let t=document.querySelector(".content"),r=document.querySelector(".startGame");return 0==A?(window.innerWidth<=500&&(t.style.width="90%",t.style.opacity=1,console.log("seima"),r.style.left="90%",e.style.opacity=0),window.innerWidth>500&&window.innerWidth<717&&(t.style.width="80%",t.style.opacity=1,console.log("seima"),r.style.left="80%",e.style.opacity=0),window.innerWidth>718&&window.innerWidth<1400&&(t.style.width="80%",t.style.opacity=1,r.style.left="81%",e.style.opacity=0),window.innerWidth>1400&&window.innerWidth<3e3&&(t.style.width="80%",t.style.opacity=1,r.style.left="80.8%",e.style.opacity=0),void(A=!0)):!0===A?(t.style.width="0%",t.style.opacity=0,r.style.left="0%",A=!1,void(e.style.opacity=1)):void 0})),n.classList.add("container"),n.appendChild(t),n.appendChild(e),n.appendChild(function(){const n=p("div",["header"]),t=p("div",["box"]),e=p("div",["one","cubic"]),A=p("div",["two","cubic"]),r=p("div",["three","cubic"]),o=p("div",["four","cubic"]),i=p("h1",["motoPage"],"Memory");return t.appendChild(e),t.appendChild(A),t.appendChild(r),t.appendChild(o),n.appendChild(t),n.appendChild(i),n}()),n.appendChild(function(){console.log(G);const n=p("div",["content"]),t=p("div",["gameArea"]);return n.appendChild(t),function n(){let e=function(n,t){let e=[],A=[];const r=p("div",[`${t}`]);for(let t=0;t<n;t++){const n=new Image(100,100);n.src=g,n.classList.add("imgCover");const r=p("div",[`puzzel${t}`,"puzzel"]);e.push(r),A.push(n)}return{arrayWithSinglePuzzel:e,containerPuzzel:r,cover:A}}(G[0].quantity,G[0].nameLvl);const{arrayWithSinglePuzzel:A,containerPuzzel:r,cover:o}=e;let i=[];A.forEach(((e,a,s)=>{e.appendChild(G[0].imgLvl[G[0].mixImg[a]]),e.appendChild(o[a]),e.addEventListener("click",(r=>{if(console.log(r.target),i.length<2){r.target.style.opacity=0;const n=[...A[a].children];i.push(n[0])}if(2===i.length)if(i[0].id===i[1].id&&i[0].parentNode.getAttribute("class")!==i[1].parentNode.getAttribute("class")){console.log("WYGRANA"),i[0].parentNode.setAttribute("trafiony",""),i[1].parentNode.setAttribute("trafiony",""),i=[];let A=[...e.parentNode.children];A=A.every((n=>!0===n.hasAttribute("trafiony"))),!0===A&&(t.removeChild(t.childNodes[0]),t.appendChild(function(){const n=p("div",["transitionContainer"]),t=p("h1",["textWhenPassLevel"],"You are Win!"),e=(p("h4",["waitNextLvl"],"Wait for next level"),p("div",["boxLoading"])),A=p("div",["oneLoading"]),r=p("div",["twoLoading"]),o=p("div",["threeLoading"]),i=p("four",["fourLoading"]);return e.appendChild(A),e.appendChild(r),e.appendChild(o),e.appendChild(i),n.appendChild(t),n.appendChild(e),n}()),setTimeout((()=>{if(G.shift(),G.length>0)t.removeChild(t.children[0]),n();else{t.removeChild(t.children[0]);let e,A=[];document.querySelector(".content").appendChild(function(){console.log(U);const n=p("div",["boxToCreateOwnLevel"]),t=p("h1",["h1FromInstruction"],"Stwórz swoją własny poziom gry"),e=p("p",["instrukcja"]),A=p("div",["pakButton"]);e.innerHTML='W <span class="nazwaObrazka">różowym okienku</span> wpisz nazwe(dowolną)\n    dla swojego zdjęcia , w okienku <span class="adresDoImg">łososiowy</span> wstaw link do obrazka , <span class="infoJakSkopiowacObraz">\n    Wejdz w google , wpisz nazawe interesujacego Cie obrazka , gdy się wyswietli kliknij na niego prawym przyciskiem myszki i wybierz opcje\n     <span class="importantText">Kopiuj adres obrazka</span> nastepnie wklej ten adres</span>\n     <br/>\n     <h4>Lub kliknij na jeden z sugerowanych obrazków</h4>\n     <br/>Przyciskiem  <span class="wazne">Dodaj zdjecie </span> dodajesz jedną pare kart do dopasowania , gdy zakonczysz\n     dodawać zdj możesz kliknąć <span class="wazne">Dodaj lewel</span>Możesz <span class="wazne"> dodać tyle poziomów ile bedziesz chciał</span><br>\n     Gdy chcesz juz zagrać nacisnij przycisk <span class="wazne">Start again</span>\n     \n     ';const r=X("input","text","idImage","Podaj nazwe dla swojego zdjecia"),o=X("textarea","text","addImage","Wstaw link do obrazka"),i=p("div",["exampleImagesToAdd"]);U.forEach(((n,t,e)=>{console.log(n),i.appendChild(n)}));const a=p("button",["btnAddImage"],"Dodaj zdjecie"),s=p("button",["btnAddLevel"],"Dodaj Lewel"),l=p("button",["btnStart"],"Start Again");return n.appendChild(t),n.appendChild(e),n.appendChild(r),n.appendChild(o),n.appendChild(i),A.appendChild(a),A.appendChild(s),A.appendChild(l),n.appendChild(A),n}());const r=document.querySelector(".boxToCreateOwnLevel"),o=document.querySelector(".exampleImagesToAdd"),i=(document.querySelector(".exampleImagesToAdd"),document.getElementById("idImage")),a=document.getElementById("addImage"),s=document.querySelector(".btnAddImage"),l=document.querySelector(".btnAddLevel"),u=document.querySelector(".btnStart");!function(n,t){n.addEventListener("input",(t=>{n.value=t.target.value,console.log(t.target.value)})),t.addEventListener("input",(n=>{t.value=n.target.value,console.log(n.target.value)}))}(i,a);let C=[...o.children];console.log(C),C.forEach(((n,t,e)=>{n.addEventListener("click",(n=>{e.forEach((n=>{n.style.border="none",n.style.borderRadius="0%",n.style.transform="none"})),n.target.style.border="3px solid green",n.target.style.transform="scale(1.2)",n.target.style.borderRadius="50%",a.value="",i.value="";let t=n.target.src,A=n.target.id;i.value=A,a.value=t}))})),s.addEventListener("click",(()=>{let n=!1;if(A.forEach(((t,e,A)=>{t.img===a.value&&(n=!0)})),"http"===a.value.substring(0,4)&&i.value.length>0&&!1===n)return A.push({img:a.value,id:i.value}),console.log(A),R(C),a.value="",void(i.value="");0===i.value.length&&T(i,"To pole nie może być puste"),0===a.value.length&&T(a,"To pole nie może być puste"),"http"!==a.value.substring(0,4)&&a.value.length>1&&T(a,"To nie jest adres obrazka"),!0===n&&(T(a,"Ten obrazek już istnieje w tworzonym poziomie"),R(C),n=!1)}));let c=!1;l.addEventListener("click",(()=>{var n;A.length>1?(A=A.concat(A),A=B(A.length,A),n=A.length,e={quantity:n,nameLvl:"ownLevel",imgLvl:A,mixImg:q(n)},console.log(e),console.log(A),A=[],G.push(e),T(a,"LEVEL ZOSTAŁ DODANY"),c=!0):A.length<2&&T(a,"Musisz dodac przynajmniej 2 obrazki")})),u.addEventListener("click",(()=>{console.log(c),!0===c?(r.remove(),n(),i.value="",a.value="",c=!1,R(C)):T(l,"")}))}}),3e3))}else console.log("Przegrana"),A.forEach(((n,t,e)=>{let r=[...A[t].children];!1===A[t].hasAttribute("trafiony")&&setTimeout((()=>{r[1].style.opacity=1,i=[]}),700)}))})),r.appendChild(e)})),t.appendChild(r)}(),n}()),n}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,